/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Synchronization
 * iModel Connections API is a cloud-based synchronization API meant to synchronize the data in Input Files and iModels. It allows users to establish links from their design files to iModels, hosted in Bentley's iModelHub. Users can setup recurring synchronization to periodically synchronize updates to their design files, or manual synchronizations.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as portableFetch from "portable-fetch";
import * as url from "url";

import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/synchronization".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface Connection
 */
export interface Connection {
  /**
   * test
   * @type {string}
   * @memberof Connection
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  displayName?: string;
  /**
   *
   * @type {boolean}
   * @memberof Connection
   */
  isScheduled?: boolean;
  /**
   *
   * @type {number}
   * @memberof Connection
   */
  scheduleLoopIntervalInSeconds?: number;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  scheduledDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  priorityLevel?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  createdDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  lastModifiedDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  persistenceType?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  bridgeParameters?: string;
  /**
   *
   * @type {boolean}
   * @memberof Connection
   */
  isSchedulePaused?: boolean;
  /**
   *
   * @type {ConnectionLinks}
   * @memberof Connection
   */
  _links?: ConnectionLinks;
}

/**
 *
 * @export
 * @interface ConnectionCreate
 */
export interface ConnectionCreate {
  /**
   *
   * @type {ConnectionCreateConnection}
   * @memberof ConnectionCreate
   */
  connection?: ConnectionCreateConnection;
}

/**
 *
 * @export
 * @interface ConnectionCreateConnection
 */
export interface ConnectionCreateConnection {
  /**
   *
   * @type {string}
   * @memberof ConnectionCreateConnection
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ConnectionCreateConnection
   */
  displayName?: string;
  /**
   *
   * @type {boolean}
   * @memberof ConnectionCreateConnection
   */
  isScheduled?: boolean;
  /**
   *
   * @type {number}
   * @memberof ConnectionCreateConnection
   */
  scheduleLoopIntervalInSeconds?: number;
  /**
   *
   * @type {string}
   * @memberof ConnectionCreateConnection
   */
  ownerEmail?: string;
  /**
   *
   * @type {ConnectionCreateConnectionProjectShareLocation}
   * @memberof ConnectionCreateConnection
   */
  projectShareLocation?: ConnectionCreateConnectionProjectShareLocation;
  /**
   *
   * @type {Array<SourceFileCreate>}
   * @memberof ConnectionCreateConnection
   */
  sourceFiles?: Array<SourceFileCreate>;
}

/**
 *
 * @export
 * @interface ConnectionCreateConnectionProjectShareLocation
 */
export interface ConnectionCreateConnectionProjectShareLocation {
  /**
   *
   * @type {string}
   * @memberof ConnectionCreateConnectionProjectShareLocation
   */
  projectId?: string;
}

/**
 *
 * @export
 * @interface ConnectionCreated
 */
export interface ConnectionCreated {
  /**
   *
   * @type {Connection}
   * @memberof ConnectionCreated
   */
  connection?: Connection;
}

/**
 *
 * @export
 * @interface ConnectionLinks
 */
export interface ConnectionLinks {
  /**
   *
   * @type {Link}
   * @memberof ConnectionLinks
   */
  iModel?: Link;
  /**
   *
   * @type {Link}
   * @memberof ConnectionLinks
   */
  projectShareLocation?: Link;
  /**
   *
   * @type {Link}
   * @memberof ConnectionLinks
   */
  lastRunDetails?: Link;
}

/**
 *
 * @export
 * @interface ConnectionSummary
 */
export interface ConnectionSummary {
  /**
   *
   * @type {string}
   * @memberof ConnectionSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ConnectionSummary
   */
  displayName?: string;
}

/**
 *
 * @export
 * @interface ConnectionsPreferReturnminimal
 */
export interface ConnectionsPreferReturnminimal {
  /**
   *
   * @type {Array<ConnectionSummary>}
   * @memberof ConnectionsPreferReturnminimal
   */
  connections?: Array<ConnectionSummary>;
  /**
   *
   * @type {Links}
   * @memberof ConnectionsPreferReturnminimal
   */
  _links?: Links;
}

/**
 *
 * @export
 * @interface ConnectionsPreferReturnrepresentation
 */
export interface ConnectionsPreferReturnrepresentation {
  /**
   *
   * @type {Array<Connection>}
   * @memberof ConnectionsPreferReturnrepresentation
   */
  connections?: Array<Connection>;
  /**
   *
   * @type {Links}
   * @memberof ConnectionsPreferReturnrepresentation
   */
  _links?: Links;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum ExecutionResult {
  Undetermined = <any>"Undetermined",
  Success = <any>"Success",
  Error = <any>"Error",
  PartialSuccess = <any>"PartialSuccess",
  Skipped = <any>"Skipped",
  Canceled = <any>"Canceled",
  TimedOut = <any>"TimedOut",
}

/**
 *
 * @export
 * @enum {string}
 */
export enum ExecutionState {
  NotStarted = <any>"NotStarted",
  Idle = <any>"Idle",
  WaitingToExecute = <any>"WaitingToExecute",
  WaitingToRetry = <any>"WaitingToRetry",
  Executing = <any>"Executing",
  Finalizing = <any>"Finalizing",
  Completed = <any>"Completed",
  Queued = <any>"Queued",
}

/**
 *
 * @export
 * @interface FileLinks
 */
export interface FileLinks {
  /**
   *
   * @type {Link}
   * @memberof FileLinks
   */
  file?: Link;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum IModelBridgeType {
  NotSet = <any>"NotSet",
  PREPROCESSOR = <any>"PREPROCESSOR",
  MSTN = <any>"MSTN",
  AVEVAPID = <any>"AVEVAPID",
  AUTOPLANT = <any>"AUTOPLANT",
  REVIT = <any>"REVIT",
  DWG = <any>"DWG",
  SPXREVIEW = <any>"SPXREVIEW",
  IFC = <any>"IFC",
  SPPID = <any>"SPPID",
  AVEVADIAGRAMS = <any>"AVEVADIAGRAMS",
  CIVIL = <any>"CIVIL",
  CIVIL3D = <any>"CIVIL3D",
  GEOSPATIAL = <any>"GEOSPATIAL",
  OBD = <any>"OBD",
  OPENTOWER = <any>"OPENTOWER",
  SHELLEDWCSV = <any>"SHELLEDWCSV",
  NWD = <any>"NWD",
  PSEXCEL = <any>"PSEXCEL",
  DACQJSON = <any>"DACQJSON",
  FUTUREON = <any>"FUTUREON",
  IFCEXPORT = <any>"IFCEXPORT",
  AFFINITYCHECKER = <any>"AFFINITYCHECKER",
}

/**
 *
 * @export
 * @interface Job
 */
export interface Job {
  /**
   *
   * @type {string}
   * @memberof Job
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  startDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  endDateTime?: string;
  /**
   *
   * @type {number}
   * @memberof Job
   */
  priority?: number;
  /**
   *
   * @type {boolean}
   * @memberof Job
   */
  hasSpatialRootTask?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Job
   */
  hasTaskDependencies?: boolean;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  jobType?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  result?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  bridgeType?: string;
  /**
   *
   * @type {Array<Task>}
   * @memberof Job
   */
  tasks?: Array<Task>;
}

/**
 *
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  href?: string;
}

/**
 *
 * @export
 * @interface Links
 */
export interface Links {
  /**
   *
   * @type {Link}
   * @memberof Links
   */
  self?: Link;
  /**
   *
   * @type {Link}
   * @memberof Links
   */
  next?: Link;
  /**
   *
   * @type {Link}
   * @memberof Links
   */
  prev?: Link;
}

/**
 *
 * @export
 * @interface Run
 */
export interface Run {
  /**
   *
   * @type {string}
   * @memberof Run
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  connectionId?: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  startDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  endDateTime?: string;
  /**
   *
   * @type {TriggerType}
   * @memberof Run
   */
  triggerType?: TriggerType;
  /**
   *
   * @type {RunPhase}
   * @memberof Run
   */
  phase?: RunPhase;
  /**
   *
   * @type {ExecutionState}
   * @memberof Run
   */
  state?: ExecutionState;
  /**
   *
   * @type {ExecutionResult}
   * @memberof Run
   */
  result?: ExecutionResult;
  /**
   *
   * @type {Array<Job>}
   * @memberof Run
   */
  jobs?: Array<Job>;
}

/**
 *
 * @export
 * @interface RunBody
 */
export interface RunBody {
  /**
   *
   * @type {Run}
   * @memberof RunBody
   */
  run?: Run;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum RunPhase {
  Preprocessor = <any>"Preprocessor",
  MasterFile = <any>"MasterFile",
  ReferenceFile = <any>"ReferenceFile",
}

/**
 *
 * @export
 * @interface RunSummary
 */
export interface RunSummary {
  /**
   *
   * @type {string}
   * @memberof RunSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof RunSummary
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof RunSummary
   */
  result?: string;
}

/**
 *
 * @export
 * @interface RunsPreferReturnminimal
 */
export interface RunsPreferReturnminimal {
  /**
   *
   * @type {Array<RunSummary>}
   * @memberof RunsPreferReturnminimal
   */
  runs?: Array<RunSummary>;
}

/**
 *
 * @export
 * @interface RunsPreferReturnrepresentation
 */
export interface RunsPreferReturnrepresentation {
  /**
   *
   * @type {Array<Run>}
   * @memberof RunsPreferReturnrepresentation
   */
  runs?: Array<Run>;
}

/**
 *
 * @export
 * @interface SourceFile
 */
export interface SourceFile {
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof SourceFile
   */
  isSpatialRoot?: boolean;
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  lastAddedToConnectionRunDateTime?: string;
  /**
   *
   * @type {IModelBridgeType}
   * @memberof SourceFile
   */
  iModelBridgeType?: IModelBridgeType;
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  createdDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  lastModifiedDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  persistenceType?: string;
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  executionAction?: string;
  /**
   *
   * @type {string}
   * @memberof SourceFile
   */
  lastKnownFileName?: string;
  /**
   *
   * @type {FileLinks}
   * @memberof SourceFile
   */
  _links?: FileLinks;
}

/**
 *
 * @export
 * @interface SourceFileCreate
 */
export interface SourceFileCreate {
  /**
   *
   * @type {string}
   * @memberof SourceFileCreate
   */
  fileId?: string;
  /**
   *
   * @type {boolean}
   * @memberof SourceFileCreate
   */
  isSpatialRoot?: boolean;
  /**
   *
   * @type {IModelBridgeType}
   * @memberof SourceFileCreate
   */
  iModelBridgeType?: IModelBridgeType;
}

/**
 *
 * @export
 * @interface SourceFileCreatebody
 */
export interface SourceFileCreatebody {
  /**
   *
   * @type {SourceFileCreate}
   * @memberof SourceFileCreatebody
   */
  sourceFile?: SourceFileCreate;
}

/**
 *
 * @export
 * @interface SourceFileCreated
 */
export interface SourceFileCreated {
  /**
   *
   * @type {SourceFile}
   * @memberof SourceFileCreated
   */
  sourceFile?: SourceFile;
}

/**
 *
 * @export
 * @interface SourceFileSummary
 */
export interface SourceFileSummary {
  /**
   *
   * @type {string}
   * @memberof SourceFileSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SourceFileSummary
   */
  isSpatialRoot?: string;
  /**
   *
   * @type {string}
   * @memberof SourceFileSummary
   */
  fileId?: string;
}

/**
 *
 * @export
 * @interface SourceFilesPreferReturnminimal
 */
export interface SourceFilesPreferReturnminimal {
  /**
   *
   * @type {Array<SourceFileSummary>}
   * @memberof SourceFilesPreferReturnminimal
   */
  sourceFiles?: Array<SourceFileSummary>;
}

/**
 *
 * @export
 * @interface SourceFilesPreferReturnrepresentation
 */
export interface SourceFilesPreferReturnrepresentation {
  /**
   *
   * @type {Array<SourceFile>}
   * @memberof SourceFilesPreferReturnrepresentation
   */
  sourceFiles?: Array<SourceFile>;
}

/**
 *
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {string}
   * @memberof Task
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  startDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  endDateTime?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Task
   */
  dependsOnIds?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  retryAttempts?: number;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  sourceFileId?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  result?: string;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum TriggerType {
  Schedule = <any>"Schedule",
  OnDemand = <any>"OnDemand",
}

/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Add a new connection sourceFile    ### Notes    The POST body MUST NOT include the id.  An id will be assigned upon successful connection sourceFile addition.    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is added to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
     * @summary Add Connection SourceFile
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {SourceFileCreatebody} sourceFile__create
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConnectionSourcefile(
      connectionId: string,
      Authorization: string,
      sourceFile__create: SourceFileCreatebody,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling addConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling addConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFile__create' is not null or undefined
      if (sourceFile__create === null || sourceFile__create === undefined) {
        throw new RequiredError(
          "sourceFile__create",
          "Required parameter sourceFile__create was null or undefined when calling addConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/sourcefiles`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"SourceFileCreatebody" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(sourceFile__create || {})
        : sourceFile__create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Create a new connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when creating a connection.    ---
     * @summary Create Connection
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {ConnectionCreate} connection__create
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(
      imodelId: string,
      Authorization: string,
      connection__create: ConnectionCreate,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling createConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createConnection."
        );
      }
      // verify required parameter 'connection__create' is not null or undefined
      if (connection__create === null || connection__create === undefined) {
        throw new RequiredError(
          "connection__create",
          "Required parameter connection__create was null or undefined when calling createConnection."
        );
      }
      const localVarPath = `/imodels/connections`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ConnectionCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(connection__create || {})
        : connection__create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling deleteConnection."
        );
      }
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling deleteConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteConnection."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connection for specified id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getConnection."
        );
      }
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnection."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connection run for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection Run
     * @param {string} connectionId
     * @param {string} runId Run Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionRun(
      connectionId: string,
      runId: string,
      Authorization: string,
      imodelId?: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getConnectionRun."
        );
      }
      // verify required parameter 'runId' is not null or undefined
      if (runId === null || runId === undefined) {
        throw new RequiredError(
          "runId",
          "Required parameter runId was null or undefined when calling getConnectionRun."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnectionRun."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/runs/{runId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(`{${"runId"}}`, encodeURIComponent(String(runId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connection runs for specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection Runs
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionRuns(
      connectionId: string,
      Authorization: string,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getConnectionRuns."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnectionRuns."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/runs`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connection sourceFile for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFileId' is not null or undefined
      if (sourceFileId === null || sourceFileId === undefined) {
        throw new RequiredError(
          "sourceFileId",
          "Required parameter sourceFileId was null or undefined when calling getConnectionSourcefile."
        );
      }
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/sourcefiles/{sourceFileId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(
          `{${"sourceFileId"}}`,
          encodeURIComponent(String(sourceFileId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connection sourceFiles for specified Id.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection SourceFiles
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionSourcefiles(
      connectionId: string,
      Authorization: string,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getConnectionSourcefiles."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnectionSourcefiles."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/sourcefiles`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connections
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getConnections."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnections."
        );
      }
      const localVarPath = `/imodels/connections`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete connection sourcefile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
     * @summary Remove Connection SourceFile
     * @param {string} connectionId Connection Id
     * @param {string} sourceFileId SourceFile Id
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling removeConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFileId' is not null or undefined
      if (sourceFileId === null || sourceFileId === undefined) {
        throw new RequiredError(
          "sourceFileId",
          "Required parameter sourceFileId was null or undefined when calling removeConnectionSourcefile."
        );
      }
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling removeConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling removeConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/sourcefiles/{sourceFileId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(
          `{${"sourceFileId"}}`,
          encodeURIComponent(String(sourceFileId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Runs connection for specified id.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued)  In case there is already an active run in progress for the connection, new run is not initiated, insteaded it returns 303/see other along with location header pointing to the active run. There can only be one active run per connection and another run can be initated only once active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
     * @summary Run Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling runConnection."
        );
      }
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling runConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling runConnection."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/run`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update an existing connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when updating a connection.    ---
     * @summary Update Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {ConnectionCreate} connection__create
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      connection__create: ConnectionCreate,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling updateConnection."
        );
      }
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling updateConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateConnection."
        );
      }
      // verify required parameter 'connection__create' is not null or undefined
      if (connection__create === null || connection__create === undefined) {
        throw new RequiredError(
          "connection__create",
          "Required parameter connection__create was null or undefined when calling updateConnection."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ConnectionCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(connection__create || {})
        : connection__create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update an existing connection sourceFile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is updated to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
     * @summary Update Connection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {SourceFileCreatebody} sourceFile__create
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      sourceFile__create: SourceFileCreatebody,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling updateConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFileId' is not null or undefined
      if (sourceFileId === null || sourceFileId === undefined) {
        throw new RequiredError(
          "sourceFileId",
          "Required parameter sourceFileId was null or undefined when calling updateConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFile__create' is not null or undefined
      if (sourceFile__create === null || sourceFile__create === undefined) {
        throw new RequiredError(
          "sourceFile__create",
          "Required parameter sourceFile__create was null or undefined when calling updateConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/connections/{connectionId}/sourcefiles/{sourceFileId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(
          `{${"sourceFileId"}}`,
          encodeURIComponent(String(sourceFileId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "connections:read connections:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"SourceFileCreatebody" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(sourceFile__create || {})
        : sourceFile__create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Add a new connection sourceFile    ### Notes    The POST body MUST NOT include the id.  An id will be assigned upon successful connection sourceFile addition.    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is added to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
     * @summary Add Connection SourceFile
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {SourceFileCreatebody} sourceFile__create
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConnectionSourcefile(
      connectionId: string,
      Authorization: string,
      sourceFile__create: SourceFileCreatebody,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<SourceFileCreated> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).addConnectionSourcefile(
        connectionId,
        Authorization,
        sourceFile__create,
        imodelId,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Create a new connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when creating a connection.    ---
     * @summary Create Connection
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {ConnectionCreate} connection__create
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(
      imodelId: string,
      Authorization: string,
      connection__create: ConnectionCreate,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ConnectionCreated> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).createConnection(
        imodelId,
        Authorization,
        connection__create,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).deleteConnection(
        connectionId,
        imodelId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connection for specified id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ConnectionCreated> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnection(connectionId, imodelId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connection run for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection Run
     * @param {string} connectionId
     * @param {string} runId Run Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionRun(
      connectionId: string,
      runId: string,
      Authorization: string,
      imodelId?: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<RunBody> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnectionRun(
        connectionId,
        runId,
        Authorization,
        imodelId,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connection runs for specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection Runs
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionRuns(
      connectionId: string,
      Authorization: string,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<RunsPreferReturnrepresentation> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnectionRuns(
        connectionId,
        Authorization,
        imodelId,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connection sourceFile for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<SourceFile> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnectionSourcefile(
        connectionId,
        sourceFileId,
        imodelId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connection sourceFiles for specified Id.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection SourceFiles
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionSourcefiles(
      connectionId: string,
      Authorization: string,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<SourceFilesPreferReturnrepresentation> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnectionSourcefiles(
        connectionId,
        Authorization,
        imodelId,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connections
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ConnectionsPreferReturnrepresentation> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnections(imodelId, Authorization, top, skip, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete connection sourcefile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
     * @summary Remove Connection SourceFile
     * @param {string} connectionId Connection Id
     * @param {string} sourceFileId SourceFile Id
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).removeConnectionSourcefile(
        connectionId,
        sourceFileId,
        imodelId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Runs connection for specified id.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued)  In case there is already an active run in progress for the connection, new run is not initiated, insteaded it returns 303/see other along with location header pointing to the active run. There can only be one active run per connection and another run can be initated only once active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
     * @summary Run Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).runConnection(connectionId, imodelId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update an existing connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when updating a connection.    ---
     * @summary Update Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {ConnectionCreate} connection__create
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      connection__create: ConnectionCreate,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ConnectionCreated> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).updateConnection(
        connectionId,
        imodelId,
        Authorization,
        connection__create,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update an existing connection sourceFile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is updated to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
     * @summary Update Connection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {SourceFileCreatebody} sourceFile__create
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      sourceFile__create: SourceFileCreatebody,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<SourceFile> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).updateConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        sourceFile__create,
        imodelId,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Add a new connection sourceFile    ### Notes    The POST body MUST NOT include the id.  An id will be assigned upon successful connection sourceFile addition.    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is added to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
     * @summary Add Connection SourceFile
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {SourceFileCreatebody} sourceFile__create
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConnectionSourcefile(
      connectionId: string,
      Authorization: string,
      sourceFile__create: SourceFileCreatebody,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).addConnectionSourcefile(
        connectionId,
        Authorization,
        sourceFile__create,
        imodelId,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Create a new connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when creating a connection.    ---
     * @summary Create Connection
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {ConnectionCreate} connection__create
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(
      imodelId: string,
      Authorization: string,
      connection__create: ConnectionCreate,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).createConnection(
        imodelId,
        Authorization,
        connection__create,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).deleteConnection(
        connectionId,
        imodelId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connection for specified id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnection(
        connectionId,
        imodelId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connection run for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection Run
     * @param {string} connectionId
     * @param {string} runId Run Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionRun(
      connectionId: string,
      runId: string,
      Authorization: string,
      imodelId?: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnectionRun(
        connectionId,
        runId,
        Authorization,
        imodelId,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connection runs for specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection Runs
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionRuns(
      connectionId: string,
      Authorization: string,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnectionRuns(
        connectionId,
        Authorization,
        imodelId,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connection sourceFile for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnectionSourcefile(
        connectionId,
        sourceFileId,
        imodelId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connection sourceFiles for specified Id.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connection SourceFiles
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionSourcefiles(
      connectionId: string,
      Authorization: string,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnectionSourcefiles(
        connectionId,
        Authorization,
        imodelId,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
     * @summary Get Connections
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnections(
        imodelId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete connection sourcefile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
     * @summary Remove Connection SourceFile
     * @param {string} connectionId Connection Id
     * @param {string} sourceFileId SourceFile Id
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).removeConnectionSourcefile(
        connectionId,
        sourceFileId,
        imodelId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Runs connection for specified id.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued)  In case there is already an active run in progress for the connection, new run is not initiated, insteaded it returns 303/see other along with location header pointing to the active run. There can only be one active run per connection and another run can be initated only once active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
     * @summary Run Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).runConnection(
        connectionId,
        imodelId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update an existing connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when updating a connection.    ---
     * @summary Update Connection
     * @param {string} connectionId
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {ConnectionCreate} connection__create
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnection(
      connectionId: string,
      imodelId: string,
      Authorization: string,
      connection__create: ConnectionCreate,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).updateConnection(
        connectionId,
        imodelId,
        Authorization,
        connection__create,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update an existing connection sourceFile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is updated to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
     * @summary Update Connection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
     * @param {SourceFileCreatebody} sourceFile__create
     * @param {string} [imodelId] iModel Id
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      sourceFile__create: SourceFileCreatebody,
      imodelId?: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).updateConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        sourceFile__create,
        imodelId,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * ---    Add a new connection sourceFile    ### Notes    The POST body MUST NOT include the id.  An id will be assigned upon successful connection sourceFile addition.    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is added to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
   * @summary Add Connection SourceFile
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {SourceFileCreatebody} sourceFile__create
   * @param {string} [imodelId] iModel Id
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addConnectionSourcefile(
    connectionId: string,
    Authorization: string,
    sourceFile__create: SourceFileCreatebody,
    imodelId?: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).addConnectionSourcefile(
      connectionId,
      Authorization,
      sourceFile__create,
      imodelId,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Create a new connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when creating a connection.    ---
   * @summary Create Connection
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {ConnectionCreate} connection__create
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createConnection(
    imodelId: string,
    Authorization: string,
    connection__create: ConnectionCreate,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).createConnection(
      imodelId,
      Authorization,
      connection__create,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
   * @summary Delete Connection
   * @param {string} connectionId
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteConnection(
    connectionId: string,
    imodelId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).deleteConnection(
      connectionId,
      imodelId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connection for specified id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
   * @summary Get Connection
   * @param {string} connectionId
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnection(
    connectionId: string,
    imodelId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnection(
      connectionId,
      imodelId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connection run for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
   * @summary Get Connection Run
   * @param {string} connectionId
   * @param {string} runId Run Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
   * @param {string} [imodelId] iModel Id
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnectionRun(
    connectionId: string,
    runId: string,
    Authorization: string,
    imodelId?: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnectionRun(
      connectionId,
      runId,
      Authorization,
      imodelId,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connection runs for specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
   * @summary Get Connection Runs
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
   * @param {string} [imodelId] iModel Id
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnectionRuns(
    connectionId: string,
    Authorization: string,
    imodelId?: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnectionRuns(
      connectionId,
      Authorization,
      imodelId,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connection sourceFile for specified Id.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
   * @summary Get Connection SourceFile
   * @param {string} connectionId
   * @param {string} sourceFileId
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnectionSourcefile(
    connectionId: string,
    sourceFileId: string,
    imodelId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnectionSourcefile(
      connectionId,
      sourceFileId,
      imodelId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connection sourceFiles for specified Id.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
   * @summary Get Connection SourceFiles
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
   * @param {string} [imodelId] iModel Id
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnectionSourcefiles(
    connectionId: string,
    Authorization: string,
    imodelId?: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnectionSourcefiles(
      connectionId,
      Authorization,
      imodelId,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connections:read*.    ---
   * @summary Get Connections
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:read&#39;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnections(
    imodelId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnections(
      imodelId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete connection sourcefile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.      ---
   * @summary Remove Connection SourceFile
   * @param {string} connectionId Connection Id
   * @param {string} sourceFileId SourceFile Id
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public removeConnectionSourcefile(
    connectionId: string,
    sourceFileId: string,
    imodelId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).removeConnectionSourcefile(
      connectionId,
      sourceFileId,
      imodelId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Runs connection for specified id.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued)  In case there is already an active run in progress for the connection, new run is not initiated, insteaded it returns 303/see other along with location header pointing to the active run. There can only be one active run per connection and another run can be initated only once active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
   * @summary Run Connection
   * @param {string} connectionId
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public runConnection(
    connectionId: string,
    imodelId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).runConnection(
      connectionId,
      imodelId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update an existing connection    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    ### Associated entities    A connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" query parameter when updating a connection.    ---
   * @summary Update Connection
   * @param {string} connectionId
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {ConnectionCreate} connection__create
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateConnection(
    connectionId: string,
    imodelId: string,
    Authorization: string,
    connection__create: ConnectionCreate,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).updateConnection(
      connectionId,
      imodelId,
      Authorization,
      connection__create,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update an existing connection sourceFile    ### Authentication    Requires *Authorization* header with valid Bearer token for scope *connections:modify*.    #### iModelBridgeType    Valid iModelBridgeType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  sourceFile is updated to a connection. path must contain valid connection Id    sourceFile associated connection is linked with an iModel.  The iModel id must be provided in the \"iModelId\" parameter when adding a connection sourceFile.    ---
   * @summary Update Connection SourceFile
   * @param {string} connectionId
   * @param {string} sourceFileId
   * @param {string} Authorization OAuth access token with scope &#39;connections:modify&#39;
   * @param {SourceFileCreatebody} sourceFile__create
   * @param {string} [imodelId] iModel Id
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] RECOMMENDED. Request a specific version of iTwin Platform API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateConnectionSourcefile(
    connectionId: string,
    sourceFileId: string,
    Authorization: string,
    sourceFile__create: SourceFileCreatebody,
    imodelId?: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).updateConnectionSourcefile(
      connectionId,
      sourceFileId,
      Authorization,
      sourceFile__create,
      imodelId,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
