/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Synchronization
 * iModel Connections API is a cloud-based synchronization API meant to synchronize the data in Input Files and iModels. It allows users to establish links from their design files to iModels, hosted in Bentley's iModelHub. Users can synchronize updates to their design files.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as portableFetch from "portable-fetch";
import * as url from "url";

import { Configuration } from "./configuration";


export const BASE_PATH = "https://api.bentley.com/synchronization".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface Connection
 */
export interface Connection {
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof Connection
   */
  iModelId?: string;
  /**
   *
   * @type {ConnectionLinks}
   * @memberof Connection
   */
  _links?: ConnectionLinks;
}

/**
 *
 * @export
 * @interface ConnectionLinks
 */
export interface ConnectionLinks {
  /**
   *
   * @type {Link}
   * @memberof ConnectionLinks
   */
  iModel?: Link;
  /**
   *
   * @type {Link}
   * @memberof ConnectionLinks
   */
  project?: Link;
  /**
   *
   * @type {Link}
   * @memberof ConnectionLinks
   */
  lastRun?: Link;
}

/**
 *
 * @export
 * @interface ConnectionSummary
 */
export interface ConnectionSummary {
  /**
   *
   * @type {string}
   * @memberof ConnectionSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ConnectionSummary
   */
  displayName?: string;
}

/**
 *
 * @export
 * @interface ConnectionsPreferReturnMinimal
 */
export interface ConnectionsPreferReturnMinimal {
  /**
   *
   * @type {Array<ConnectionSummary>}
   * @memberof ConnectionsPreferReturnMinimal
   */
  connections?: Array<ConnectionSummary>;
  /**
   *
   * @type {Links}
   * @memberof ConnectionsPreferReturnMinimal
   */
  _links?: Links;
}

/**
 *
 * @export
 * @interface ConnectionsPreferReturnRepresentation
 */
export interface ConnectionsPreferReturnRepresentation {
  /**
   *
   * @type {Array<Connection>}
   * @memberof ConnectionsPreferReturnRepresentation
   */
  connections?: Array<Connection>;
  /**
   *
   * @type {Links}
   * @memberof ConnectionsPreferReturnRepresentation
   */
  _links?: Links;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum ExecutionResult {
  Undetermined = <any>"Undetermined",
  Success = <any>"Success",
  Error = <any>"Error",
  PartialSuccess = <any>"PartialSuccess",
  Skipped = <any>"Skipped",
  Canceled = <any>"Canceled",
  TimedOut = <any>"TimedOut",
}

/**
 *
 * @export
 * @enum {string}
 */
export enum ExecutionState {
  NotStarted = <any>"NotStarted",
  Idle = <any>"Idle",
  WaitingToExecute = <any>"WaitingToExecute",
  WaitingToRetry = <any>"WaitingToRetry",
  Executing = <any>"Executing",
  Finalizing = <any>"Finalizing",
  Completed = <any>"Completed",
  Queued = <any>"Queued",
}

/**
 *
 * @export
 * @interface FileLinks
 */
export interface FileLinks {
  /**
   *
   * @type {Link}
   * @memberof FileLinks
   */
  file?: Link;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum IModelBridgeType {
  NotSet = <any>"NotSet",
  PREPROCESSOR = <any>"PREPROCESSOR",
  MSTN = <any>"MSTN",
  AVEVAPID = <any>"AVEVAPID",
  AUTOPLANT = <any>"AUTOPLANT",
  REVIT = <any>"REVIT",
  DWG = <any>"DWG",
  SPXREVIEW = <any>"SPXREVIEW",
  IFC = <any>"IFC",
  SPPID = <any>"SPPID",
  AVEVADIAGRAMS = <any>"AVEVADIAGRAMS",
  CIVIL = <any>"CIVIL",
  CIVIL3D = <any>"CIVIL3D",
  GEOSPATIAL = <any>"GEOSPATIAL",
  OBD = <any>"OBD",
  OPENTOWER = <any>"OPENTOWER",
  SHELLEDWCSV = <any>"SHELLEDWCSV",
  NWD = <any>"NWD",
  PSEXCEL = <any>"PSEXCEL",
  DACQJSON = <any>"DACQJSON",
  FUTUREON = <any>"FUTUREON",
  IFCEXPORT = <any>"IFCEXPORT",
  AFFINITYCHECKER = <any>"AFFINITYCHECKER",
}

/**
 *
 * @export
 * @interface Job
 */
export interface Job {
  /**
   *
   * @type {string}
   * @memberof Job
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  startDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  endDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof Job
   */
  result?: string;
  /**
   *
   * @type {IModelBridgeType}
   * @memberof Job
   */
  connectorType?: IModelBridgeType;
  /**
   *
   * @type {Array<Task>}
   * @memberof Job
   */
  tasks?: Array<Task>;
}

/**
 *
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  href?: string;
}

/**
 *
 * @export
 * @interface Links
 */
export interface Links {
  /**
   *
   * @type {Link}
   * @memberof Links
   */
  self?: Link;
  /**
   *
   * @type {Link}
   * @memberof Links
   */
  next?: Link;
  /**
   *
   * @type {Link}
   * @memberof Links
   */
  prev?: Link;
}

/**
 *
 * @export
 * @interface Run
 */
export interface Run {
  /**
   *
   * @type {string}
   * @memberof Run
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  connectionId?: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  startDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  endDateTime?: string;
  /**
   *
   * @type {TriggerType}
   * @memberof Run
   */
  triggerType?: TriggerType;
  /**
   *
   * @type {RunPhase}
   * @memberof Run
   */
  phase?: RunPhase;
  /**
   *
   * @type {ExecutionState}
   * @memberof Run
   */
  state?: ExecutionState;
  /**
   *
   * @type {ExecutionResult}
   * @memberof Run
   */
  result?: ExecutionResult;
  /**
   *
   * @type {Array<Job>}
   * @memberof Run
   */
  jobs?: Array<Job>;
}

/**
 *
 * @export
 * @interface RunBody
 */
export interface RunBody {
  /**
   *
   * @type {Run}
   * @memberof RunBody
   */
  run?: Run;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum RunPhase {
  Preprocessor = <any>"Preprocessor",
  MasterFile = <any>"MasterFile",
  ReferenceFile = <any>"ReferenceFile",
}

/**
 *
 * @export
 * @interface RunSummary
 */
export interface RunSummary {
  /**
   *
   * @type {string}
   * @memberof RunSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof RunSummary
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof RunSummary
   */
  result?: string;
}

/**
 *
 * @export
 * @interface RunsPreferReturnMinimal
 */
export interface RunsPreferReturnMinimal {
  /**
   *
   * @type {Array<RunSummary>}
   * @memberof RunsPreferReturnMinimal
   */
  runs?: Array<RunSummary>;
}

/**
 *
 * @export
 * @interface RunsPreferReturnRepresentation
 */
export interface RunsPreferReturnRepresentation {
  /**
   *
   * @type {Array<Run>}
   * @memberof RunsPreferReturnRepresentation
   */
  runs?: Array<Run>;
}

/**
 *
 * @export
 * @interface StorageConnection
 */
export interface StorageConnection {
  /**
   *
   * @type {string}
   * @memberof StorageConnection
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof StorageConnection
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof StorageConnection
   */
  iModelId?: string;
  /**
   *
   * @type {ConnectionLinks}
   * @memberof StorageConnection
   */
  _links?: ConnectionLinks;
}

/**
 *
 * @export
 * @interface StorageConnectionBody
 */
export interface StorageConnectionBody {
  /**
   *
   * @type {StorageConnection}
   * @memberof StorageConnectionBody
   */
  connection?: StorageConnection;
}

/**
 *
 * @export
 * @interface StorageConnectionCreate
 */
export interface StorageConnectionCreate {
  /**
   *
   * @type {string}
   * @memberof StorageConnectionCreate
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof StorageConnectionCreate
   */
  iModelId: string;
  /**
   *
   * @type {Array<StorageFileCreate>}
   * @memberof StorageConnectionCreate
   */
  sourceFiles: Array<StorageFileCreate>;
}

/**
 *
 * @export
 * @interface StorageConnectionSummary
 */
export interface StorageConnectionSummary {
  /**
   *
   * @type {string}
   * @memberof StorageConnectionSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof StorageConnectionSummary
   */
  displayName?: string;
}

/**
 *
 * @export
 * @interface StorageFile
 */
export interface StorageFile {
  /**
   *
   * @type {string}
   * @memberof StorageFile
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof StorageFile
   */
  storageFileId?: string;
  /**
   *
   * @type {IModelBridgeType}
   * @memberof StorageFile
   */
  connectorType?: IModelBridgeType;
  /**
   *
   * @type {string}
   * @memberof StorageFile
   */
  lastKnownFileName?: string;
  /**
   *
   * @type {FileLinks}
   * @memberof StorageFile
   */
  _links?: FileLinks;
}

/**
 *
 * @export
 * @interface StorageFileBody
 */
export interface StorageFileBody {
  /**
   *
   * @type {StorageFile}
   * @memberof StorageFileBody
   */
  sourceFile?: StorageFile;
}

/**
 *
 * @export
 * @interface StorageFileCreate
 */
export interface StorageFileCreate {
  /**
   *
   * @type {string}
   * @memberof StorageFileCreate
   */
  storageFileId: string;
  /**
   *
   * @type {IModelBridgeType}
   * @memberof StorageFileCreate
   */
  connectorType: IModelBridgeType;
}

/**
 *
 * @export
 * @interface StorageFilePreferReturnMinimal
 */
export interface StorageFilePreferReturnMinimal {
  /**
   *
   * @type {Array<StorageFileSummary>}
   * @memberof StorageFilePreferReturnMinimal
   */
  sourceFiles?: Array<StorageFileSummary>;
}

/**
 *
 * @export
 * @interface StorageFilePreferReturnRepresentation
 */
export interface StorageFilePreferReturnRepresentation {
  /**
   *
   * @type {Array<StorageFile>}
   * @memberof StorageFilePreferReturnRepresentation
   */
  sourceFiles?: Array<StorageFile>;
}

/**
 *
 * @export
 * @interface StorageFileSummary
 */
export interface StorageFileSummary {
  /**
   *
   * @type {string}
   * @memberof StorageFileSummary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof StorageFileSummary
   */
  storageFileId?: string;
}

/**
 *
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {string}
   * @memberof Task
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  startDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  endDateTime?: string;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  retryAttempts?: number;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  storageFileId?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  result?: string;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum TriggerType {
  Schedule = <any>"Schedule",
  OnDemand = <any>"OnDemand",
}

/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Add a new Storage Source File to a Storage Connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is added to a Connection. The reuqest path must contain a valid Connection ID    ---
     * @summary Add StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageFileCreate} [storage_file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorageConnectionSourcefile(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_file_create?: StorageFileCreate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling addStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling addStorageConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/sourcefiles`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"StorageFileCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(storage_file_create || {})
        : storage_file_create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Create a StorageConnection that describes files from Storage to synchronize to the iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. An iModel ID is required to be set when creating a StorageConnection.    ---
     * @summary Create StorageConnection
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageConnectionCreate} [storage_connection_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStorageConnection(
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_connection_create?: StorageConnectionCreate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createStorageConnection."
        );
      }
      const localVarPath = `/imodels/storageConnections`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"StorageConnectionCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(storage_connection_create || {})
        : storage_connection_create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
     * @summary Delete StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling deleteStorageConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteStorageConnection."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Connections
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getConnections."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getConnections."
        );
      }
      const localVarPath = `/imodels/connections`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (imodelId !== undefined) {
        localVarQueryParameter["imodelId"] = imodelId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a StorageConnection with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Storage Connection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getStorageConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getStorageConnection."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a StorageConnection Run with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Storage Connection Run
     * @param {string} connectionId
     * @param {string} runId Run Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionRun(
      connectionId: string,
      runId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getStorageConnectionRun."
        );
      }
      // verify required parameter 'runId' is not null or undefined
      if (runId === null || runId === undefined) {
        throw new RequiredError(
          "runId",
          "Required parameter runId was null or undefined when calling getStorageConnectionRun."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getStorageConnectionRun."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/runs/{runId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(`{${"runId"}}`, encodeURIComponent(String(runId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves all Runs for the specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection Runs
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionRuns(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getStorageConnectionRuns."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getStorageConnectionRuns."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/runs`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves StorageConnection's SourceFile with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFileId' is not null or undefined
      if (sourceFileId === null || sourceFileId === undefined) {
        throw new RequiredError(
          "sourceFileId",
          "Required parameter sourceFileId was null or undefined when calling getStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getStorageConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/sourcefiles/{sourceFileId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(
          `{${"sourceFileId"}}`,
          encodeURIComponent(String(sourceFileId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves SourceFiles for specified StorageConnection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection SourceFiles
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionSourcefiles(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling getStorageConnectionSourcefiles."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getStorageConnectionSourcefiles."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/sourcefiles`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete StorageConnection SourceFile    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
     * @summary Remove StorageConnection SourceFile
     * @param {string} connectionId Connection Id
     * @param {string} sourceFileId SourceFile Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling removeStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFileId' is not null or undefined
      if (sourceFileId === null || sourceFileId === undefined) {
        throw new RequiredError(
          "sourceFileId",
          "Required parameter sourceFileId was null or undefined when calling removeStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling removeStorageConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/sourcefiles/{sourceFileId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(
          `{${"sourceFileId"}}`,
          encodeURIComponent(String(sourceFileId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Runs the specified StorageConnection.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued). In the event that multiple run requests are being made simultaneously, 409/conflict is returned and only the first request is processed. If the run is already initiated and active, a new run is not initiated, instead 303/see other is returned along with location header pointing to the active run. There can only be one active run per iModel and another run can be initated only once the active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
     * @summary Run StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling runStorageConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling runStorageConnection."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/run`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update an existing StorageConnection.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. The iModel ID is required to be set when updating a StorageConnection.    ---
     * @summary Update StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageConnectionCreate} [storage_connection_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_connection_create?: StorageConnectionCreate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling updateStorageConnection."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateStorageConnection."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}`.replace(
        `{${"connectionId"}}`,
        encodeURIComponent(String(connectionId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"StorageConnectionCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(storage_connection_create || {})
        : storage_connection_create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update an existing StorageConnection SourceFile.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is related to a Connection. The path must contain a valid Connection ID.    ---
     * @summary Update StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageFileCreate} [storage_file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_file_create?: StorageFileCreate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling updateStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'sourceFileId' is not null or undefined
      if (sourceFileId === null || sourceFileId === undefined) {
        throw new RequiredError(
          "sourceFileId",
          "Required parameter sourceFileId was null or undefined when calling updateStorageConnectionSourcefile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateStorageConnectionSourcefile."
        );
      }
      const localVarPath = `/imodels/storageConnections/{connectionId}/sourcefiles/{sourceFileId}`
        .replace(
          `{${"connectionId"}}`,
          encodeURIComponent(String(connectionId))
        )
        .replace(
          `{${"sourceFileId"}}`,
          encodeURIComponent(String(sourceFileId))
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "synchronization:read synchronization:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"StorageFileCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(storage_file_create || {})
        : storage_file_create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Add a new Storage Source File to a Storage Connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is added to a Connection. The reuqest path must contain a valid Connection ID    ---
     * @summary Add StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageFileCreate} [storage_file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorageConnectionSourcefile(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_file_create?: StorageFileCreate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<StorageFileBody> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).addStorageConnectionSourcefile(
        connectionId,
        Authorization,
        Accept,
        storage_file_create,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Create a StorageConnection that describes files from Storage to synchronize to the iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. An iModel ID is required to be set when creating a StorageConnection.    ---
     * @summary Create StorageConnection
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageConnectionCreate} [storage_connection_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStorageConnection(
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_connection_create?: StorageConnectionCreate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<StorageConnectionBody> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).createStorageConnection(
        Authorization,
        Accept,
        storage_connection_create,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
     * @summary Delete StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).deleteStorageConnection(connectionId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Connections
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ConnectionsPreferReturnRepresentation> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getConnections(imodelId, Authorization, top, skip, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a StorageConnection with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Storage Connection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<StorageConnection> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getStorageConnection(connectionId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a StorageConnection Run with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Storage Connection Run
     * @param {string} connectionId
     * @param {string} runId Run Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionRun(
      connectionId: string,
      runId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<RunBody> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getStorageConnectionRun(
        connectionId,
        runId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves all Runs for the specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection Runs
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionRuns(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<RunsPreferReturnRepresentation> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getStorageConnectionRuns(connectionId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves StorageConnection's SourceFile with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<StorageFile> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getStorageConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves SourceFiles for specified StorageConnection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection SourceFiles
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionSourcefiles(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<StorageFilePreferReturnRepresentation> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).getStorageConnectionSourcefiles(
        connectionId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete StorageConnection SourceFile    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
     * @summary Remove StorageConnection SourceFile
     * @param {string} connectionId Connection Id
     * @param {string} sourceFileId SourceFile Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).removeStorageConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Runs the specified StorageConnection.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued). In the event that multiple run requests are being made simultaneously, 409/conflict is returned and only the first request is processed. If the run is already initiated and active, a new run is not initiated, instead 303/see other is returned along with location header pointing to the active run. There can only be one active run per iModel and another run can be initated only once the active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
     * @summary Run StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).runStorageConnection(connectionId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update an existing StorageConnection.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. The iModel ID is required to be set when updating a StorageConnection.    ---
     * @summary Update StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageConnectionCreate} [storage_connection_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_connection_create?: StorageConnectionCreate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<StorageConnection> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).updateStorageConnection(
        connectionId,
        Authorization,
        Accept,
        storage_connection_create,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update an existing StorageConnection SourceFile.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is related to a Connection. The path must contain a valid Connection ID.    ---
     * @summary Update StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageFileCreate} [storage_file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_file_create?: StorageFileCreate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<StorageFileBody> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).updateStorageConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        Accept,
        storage_file_create,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Add a new Storage Source File to a Storage Connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is added to a Connection. The reuqest path must contain a valid Connection ID    ---
     * @summary Add StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageFileCreate} [storage_file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorageConnectionSourcefile(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_file_create?: StorageFileCreate,
      options?: any
    ) {
      return DefaultApiFp(configuration).addStorageConnectionSourcefile(
        connectionId,
        Authorization,
        Accept,
        storage_file_create,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Create a StorageConnection that describes files from Storage to synchronize to the iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. An iModel ID is required to be set when creating a StorageConnection.    ---
     * @summary Create StorageConnection
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageConnectionCreate} [storage_connection_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStorageConnection(
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_connection_create?: StorageConnectionCreate,
      options?: any
    ) {
      return DefaultApiFp(configuration).createStorageConnection(
        Authorization,
        Accept,
        storage_connection_create,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
     * @summary Delete StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).deleteStorageConnection(
        connectionId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Connections
     * @param {string} imodelId iModel Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(
      imodelId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getConnections(
        imodelId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a StorageConnection with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Storage Connection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getStorageConnection(
        connectionId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a StorageConnection Run with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get Storage Connection Run
     * @param {string} connectionId
     * @param {string} runId Run Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionRun(
      connectionId: string,
      runId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getStorageConnectionRun(
        connectionId,
        runId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves all Runs for the specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection Runs
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionRuns(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getStorageConnectionRuns(
        connectionId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves StorageConnection's SourceFile with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getStorageConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves SourceFiles for specified StorageConnection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
     * @summary Get StorageConnection SourceFiles
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageConnectionSourcefiles(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).getStorageConnectionSourcefiles(
        connectionId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete StorageConnection SourceFile    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
     * @summary Remove StorageConnection SourceFile
     * @param {string} connectionId Connection Id
     * @param {string} sourceFileId SourceFile Id
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).removeStorageConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Runs the specified StorageConnection.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued). In the event that multiple run requests are being made simultaneously, 409/conflict is returned and only the first request is processed. If the run is already initiated and active, a new run is not initiated, instead 303/see other is returned along with location header pointing to the active run. There can only be one active run per iModel and another run can be initated only once the active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
     * @summary Run StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return DefaultApiFp(configuration).runStorageConnection(
        connectionId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update an existing StorageConnection.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. The iModel ID is required to be set when updating a StorageConnection.    ---
     * @summary Update StorageConnection
     * @param {string} connectionId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageConnectionCreate} [storage_connection_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStorageConnection(
      connectionId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_connection_create?: StorageConnectionCreate,
      options?: any
    ) {
      return DefaultApiFp(configuration).updateStorageConnection(
        connectionId,
        Authorization,
        Accept,
        storage_connection_create,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update an existing StorageConnection SourceFile.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is related to a Connection. The path must contain a valid Connection ID.    ---
     * @summary Update StorageConnection SourceFile
     * @param {string} connectionId
     * @param {string} sourceFileId
     * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {StorageFileCreate} [storage_file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStorageConnectionSourcefile(
      connectionId: string,
      sourceFileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      storage_file_create?: StorageFileCreate,
      options?: any
    ) {
      return DefaultApiFp(configuration).updateStorageConnectionSourcefile(
        connectionId,
        sourceFileId,
        Authorization,
        Accept,
        storage_file_create,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * ---    Add a new Storage Source File to a Storage Connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is added to a Connection. The reuqest path must contain a valid Connection ID    ---
   * @summary Add StorageConnection SourceFile
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {StorageFileCreate} [storage_file_create]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addStorageConnectionSourcefile(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    storage_file_create?: StorageFileCreate,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).addStorageConnectionSourcefile(
      connectionId,
      Authorization,
      Accept,
      storage_file_create,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Create a StorageConnection that describes files from Storage to synchronize to the iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. An iModel ID is required to be set when creating a StorageConnection.    ---
   * @summary Create StorageConnection
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {StorageConnectionCreate} [storage_connection_create]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createStorageConnection(
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    storage_connection_create?: StorageConnectionCreate,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).createStorageConnection(
      Authorization,
      Accept,
      storage_connection_create,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete connection    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
   * @summary Delete StorageConnection
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteStorageConnection(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).deleteStorageConnection(
      connectionId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves connections for the specified iModel.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
   * @summary Get Connections
   * @param {string} imodelId iModel Id
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConnections(
    imodelId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getConnections(
      imodelId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a StorageConnection with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
   * @summary Get Storage Connection
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getStorageConnection(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getStorageConnection(
      connectionId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a StorageConnection Run with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
   * @summary Get Storage Connection Run
   * @param {string} connectionId
   * @param {string} runId Run Id
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getStorageConnectionRun(
    connectionId: string,
    runId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getStorageConnectionRun(
      connectionId,
      runId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves all Runs for the specified connection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
   * @summary Get StorageConnection Runs
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getStorageConnectionRuns(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getStorageConnectionRuns(
      connectionId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves StorageConnection's SourceFile with the specified ID.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
   * @summary Get StorageConnection SourceFile
   * @param {string} connectionId
   * @param {string} sourceFileId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getStorageConnectionSourcefile(
    connectionId: string,
    sourceFileId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getStorageConnectionSourcefile(
      connectionId,
      sourceFileId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves SourceFiles for specified StorageConnection.    ### Notes    The `Prefer` header can be used to specify how much result metadata is desired by the client. The `Prefer` request header field is used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request.    This operation supports `\"return=representation\"` and `\"return=minimal\"` preferences.    The `\"return=representation\"` preference indicates that the client prefers that the server include an entity representing the current state of the resource in the response to a successful request.  The `\"return=minimal\"` preference indicates that the client wishes the server to return only a minimal response to a successful request. This is the default preference if `Prefer` header is not specified.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:read`.    ---
   * @summary Get StorageConnection SourceFiles
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:read&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getStorageConnectionSourcefiles(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).getStorageConnectionSourcefiles(
      connectionId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete StorageConnection SourceFile    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.      ---
   * @summary Remove StorageConnection SourceFile
   * @param {string} connectionId Connection Id
   * @param {string} sourceFileId SourceFile Id
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public removeStorageConnectionSourcefile(
    connectionId: string,
    sourceFileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).removeStorageConnectionSourcefile(
      connectionId,
      sourceFileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Runs the specified StorageConnection.    ### Notes    On successful run, operation returns http status code 202/accepted - the request is accepted for processing and will execute in background. It returns location header pointing to the run to check it's status via property 'State'(NotStarted, Idle, WaitingToExecute, WaitingToRetry, Executing, Completed, Queued). In the event that multiple run requests are being made simultaneously, 409/conflict is returned and only the first request is processed. If the run is already initiated and active, a new run is not initiated, instead 303/see other is returned along with location header pointing to the active run. There can only be one active run per iModel and another run can be initated only once the active run is complete.    ### Authentication    Requires Authorization header with valid Bearer token for scope *connection:modify*.    ---
   * @summary Run StorageConnection
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public runStorageConnection(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return DefaultApiFp(this.configuration).runStorageConnection(
      connectionId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update an existing StorageConnection.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    ### Associated entities    A connection is linked with an iModel. The iModel ID is required to be set when updating a StorageConnection.    ---
   * @summary Update StorageConnection
   * @param {string} connectionId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {StorageConnectionCreate} [storage_connection_create]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateStorageConnection(
    connectionId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    storage_connection_create?: StorageConnectionCreate,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).updateStorageConnection(
      connectionId,
      Authorization,
      Accept,
      storage_connection_create,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update an existing StorageConnection SourceFile.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `synchronization:modify`.    #### ConnectorType    Valid ConnectorType values are:    -NotSet  -AFFINITYCHECKER  -MSTN  -AVEVAPID  -AUTOPLANT  -REVIT  -DWG  -SPXREVIEW  -IFC  -SPPID  -AVEVADIAGRAMS  -CIVIL  -CIVIL3D  -GEOSPATIAL  -OBD  -OPENTOWER  -SHELLEDWCSV  -NWD    ### Associated entities  SourceFile is related to a Connection. The path must contain a valid Connection ID.    ---
   * @summary Update StorageConnection SourceFile
   * @param {string} connectionId
   * @param {string} sourceFileId
   * @param {string} Authorization OAuth access token with scope &#x60;synchronization:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {StorageFileCreate} [storage_file_create]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateStorageConnectionSourcefile(
    connectionId: string,
    sourceFileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    storage_file_create?: StorageFileCreate,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).updateStorageConnectionSourcefile(
      connectionId,
      sourceFileId,
      Authorization,
      Accept,
      storage_file_create,
      options
    )(this.fetch, this.basePath);
  }
}
