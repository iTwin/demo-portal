/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *
 * This code is for demonstration purposes and should not be considered production ready.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Saved Views
 * The Saved Views API provides a central place to store view information so it can be retrieved or shared across applications.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import * as isomorphicFetch from "isomorphic-fetch";
import * as url from "url";

import { Configuration } from "./configuration";


export const BASE_PATH = "https://api.bentley.com/savedviews".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface ErrorDetailSavedviewsAPI
 */
export interface ErrorDetailSavedviewsAPI {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorDetailSavedviewsAPI
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorDetailSavedviewsAPI
   */
  message: string;
  /**
   * Optional target of the error message
   * @type {string}
   * @memberof ErrorDetailSavedviewsAPI
   */
  target?: string;
}
/**
 * Contains error information.
 * @export
 * @interface ErrorDetailsSavedviewsAPI
 */
export interface ErrorDetailsSavedviewsAPI {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorDetailsSavedviewsAPI
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorDetailsSavedviewsAPI
   */
  message: string;
}
/**
 * Gives details for an error that occurred while handling the request. Note that clients MUST NOT assume that every failed request will produce an object of this schema, or that all of the properties in the response will be non-null, as the error may have prevented this response from being constructed.
 * @export
 * @interface ErrorResponseSavedviewsAPI
 */
export interface ErrorResponseSavedviewsAPI {
  /**
   *
   * @type {Error}
   * @memberof ErrorResponseSavedviewsAPI
   */
  error: Error;
}
/**
 * Contains error information and an optional array of more specific errors.
 * @export
 * @interface ErrorSavedviewsAPI
 */
export interface ErrorSavedviewsAPI {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorSavedviewsAPI
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorSavedviewsAPI
   */
  message: string;
  /**
   * Optional array of more specific errors.
   * @type {Array<ErrorDetailsSavedviewsAPI>}
   * @memberof ErrorSavedviewsAPI
   */
  details?: Array<ErrorDetailsSavedviewsAPI>;
}
/**
 *
 * @export
 * @interface GroupCreateSavedviewsAPI
 */
export interface GroupCreateSavedviewsAPI {
  /**
   * Connected project ID
   * @type {string}
   * @memberof GroupCreateSavedviewsAPI
   */
  projectId: string;
  /**
   * IModel ID
   * @type {string}
   * @memberof GroupCreateSavedviewsAPI
   */
  iModelId?: string;
  /**
   * Group Name
   * @type {string}
   * @memberof GroupCreateSavedviewsAPI
   */
  displayName: string;
  /**
   * Is Group Shared
   * @type {boolean}
   * @memberof GroupCreateSavedviewsAPI
   */
  shared?: boolean;
}
/**
 *
 * @export
 * @interface GroupLinksSavedviewsAPI
 */
export interface GroupLinksSavedviewsAPI {
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof GroupLinksSavedviewsAPI
   */
  project: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof GroupLinksSavedviewsAPI
   */
  imodel?: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof GroupLinksSavedviewsAPI
   */
  creator: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof GroupLinksSavedviewsAPI
   */
  savedViews: LinkSavedviewsAPI;
}
/**
 *
 * @export
 * @interface GroupListLinksSavedviewsAPI
 */
export interface GroupListLinksSavedviewsAPI {
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof GroupListLinksSavedviewsAPI
   */
  self: LinkSavedviewsAPI;
}
/**
 *
 * @export
 * @interface GroupListResponseSavedviewsAPI
 */
export interface GroupListResponseSavedviewsAPI {
  /**
   * Requested groups
   * @type {Array<GroupSavedviewsAPI>}
   * @memberof GroupListResponseSavedviewsAPI
   */
  groups: Array<GroupSavedviewsAPI>;
  /**
   *
   * @type {GroupListLinksSavedviewsAPI}
   * @memberof GroupListResponseSavedviewsAPI
   */
  _links: GroupListLinksSavedviewsAPI;
}
/**
 *
 * @export
 * @interface GroupResponseSavedviewsAPI
 */
export interface GroupResponseSavedviewsAPI {
  /**
   *
   * @type {GroupSavedviewsAPI}
   * @memberof GroupResponseSavedviewsAPI
   */
  group: GroupSavedviewsAPI;
}
/**
 *
 * @export
 * @interface GroupSavedviewsAPI
 */
export interface GroupSavedviewsAPI {
  /**
   * Unique identifier
   * @type {string}
   * @memberof GroupSavedviewsAPI
   */
  id: string;
  /**
   * User visible name
   * @type {string}
   * @memberof GroupSavedviewsAPI
   */
  displayName: string;
  /**
   * Flag for whether or not element is shared
   * @type {boolean}
   * @memberof GroupSavedviewsAPI
   */
  shared: boolean;
  /**
   *
   * @type {GroupLinksSavedviewsAPI}
   * @memberof GroupSavedviewsAPI
   */
  _links: GroupLinksSavedviewsAPI;
}
/**
 *
 * @export
 * @interface GroupUpdateSavedviewsAPI
 */
export interface GroupUpdateSavedviewsAPI {
  /**
   * Group Name
   * @type {string}
   * @memberof GroupUpdateSavedviewsAPI
   */
  displayName?: string;
  /**
   * Is Group Shared
   * @type {boolean}
   * @memberof GroupUpdateSavedviewsAPI
   */
  shared?: boolean;
}
/**
 *
 * @export
 * @interface ImageResponseSavedviewsAPI
 */
export interface ImageResponseSavedviewsAPI {
  /**
   * Http reference
   * @type {string}
   * @memberof ImageResponseSavedviewsAPI
   */
  href: string;
}
/**
 *
 * @export
 * @interface ImageUpdateSavedviewsAPI
 */
export interface ImageUpdateSavedviewsAPI {
  /**
   * image/png data URL
   * @type {string}
   * @memberof ImageUpdateSavedviewsAPI
   */
  image: string;
}
/**
 *
 * @export
 * @interface LinkSavedviewsAPI
 */
export interface LinkSavedviewsAPI {
  /**
   * Http reference
   * @type {string}
   * @memberof LinkSavedviewsAPI
   */
  href: string;
}
/**
 *
 * @export
 * @interface SavedViewCreateSavedviewsAPI
 */
export interface SavedViewCreateSavedviewsAPI {
  /**
   * Connected project ID
   * @type {string}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  projectId: string;
  /**
   * IModel ID
   * @type {string}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  iModelId?: string;
  /**
   *
   * @type {ViewSavedviewsAPI}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  savedViewData: ViewSavedviewsAPI;
  /**
   * Group ID
   * @type {string}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  groupId?: string;
  /**
   * Saved View Name
   * @type {string}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  displayName: string;
  /**
   * Flag for whether or not Saved View is shared
   * @type {boolean}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  shared?: boolean;
  /**
   * List of tag ids to apply to the saved view
   * @type {Array<string>}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  tagIds?: Array<string>;
  /**
   * Saved view category
   * @type {string}
   * @memberof SavedViewCreateSavedviewsAPI
   */
  category?: string;
}
/**
 *
 * @export
 * @interface SavedViewLinksSavedviewsAPI
 */
export interface SavedViewLinksSavedviewsAPI {
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewLinksSavedviewsAPI
   */
  project: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewLinksSavedviewsAPI
   */
  imodel?: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewLinksSavedviewsAPI
   */
  creator: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewLinksSavedviewsAPI
   */
  group?: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewLinksSavedviewsAPI
   */
  image: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewLinksSavedviewsAPI
   */
  thumbnail: LinkSavedviewsAPI;
}
/**
 *
 * @export
 * @interface SavedViewListLinksSavedviewsAPI
 */
export interface SavedViewListLinksSavedviewsAPI {
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewListLinksSavedviewsAPI
   */
  self: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewListLinksSavedviewsAPI
   */
  prev?: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof SavedViewListLinksSavedviewsAPI
   */
  next?: LinkSavedviewsAPI;
}
/**
 *
 * @export
 * @interface SavedViewListResponseSavedviewsAPI
 */
export interface SavedViewListResponseSavedviewsAPI {
  /**
   * Requested saved views
   * @type {Array<SavedViewSavedviewsAPI>}
   * @memberof SavedViewListResponseSavedviewsAPI
   */
  savedViews: Array<SavedViewSavedviewsAPI>;
  /**
   *
   * @type {SavedViewListLinksSavedviewsAPI}
   * @memberof SavedViewListResponseSavedviewsAPI
   */
  _links: SavedViewListLinksSavedviewsAPI;
}
/**
 *
 * @export
 * @interface SavedViewResponseSavedviewsAPI
 */
export interface SavedViewResponseSavedviewsAPI {
  /**
   *
   * @type {SavedViewWithDataSavedviewsAPI}
   * @memberof SavedViewResponseSavedviewsAPI
   */
  savedView: SavedViewWithDataSavedviewsAPI;
}
/**
 *
 * @export
 * @interface SavedViewSavedviewsAPI
 */
export interface SavedViewSavedviewsAPI {
  /**
   * Unique identifier
   * @type {string}
   * @memberof SavedViewSavedviewsAPI
   */
  id: string;
  /**
   * User visible name
   * @type {string}
   * @memberof SavedViewSavedviewsAPI
   */
  displayName: string;
  /**
   * Flag for whether or not element is shared
   * @type {boolean}
   * @memberof SavedViewSavedviewsAPI
   */
  shared: boolean;
  /**
   * Category of Saved View
   * @type {string}
   * @memberof SavedViewSavedviewsAPI
   */
  category?: string;
  /**
   * Tags of Saved View
   * @type {Array<SavedViewTagSavedviewsAPI>}
   * @memberof SavedViewSavedviewsAPI
   */
  tags?: Array<SavedViewTagSavedviewsAPI>;
  /**
   *
   * @type {SavedViewLinksSavedviewsAPI}
   * @memberof SavedViewSavedviewsAPI
   */
  _links: SavedViewLinksSavedviewsAPI;
}
/**
 *
 * @export
 * @interface SavedViewTagSavedviewsAPI
 */
export interface SavedViewTagSavedviewsAPI {
  /**
   * Linked Tag identifier
   * @type {string}
   * @memberof SavedViewTagSavedviewsAPI
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof SavedViewTagSavedviewsAPI
   */
  displayName: string;
}
/**
 *
 * @export
 * @interface SavedViewUpdateSavedviewsAPI
 */
export interface SavedViewUpdateSavedviewsAPI {
  /**
   *
   * @type {ViewSavedviewsAPI}
   * @memberof SavedViewUpdateSavedviewsAPI
   */
  savedViewData?: ViewSavedviewsAPI;
  /**
   * Group ID
   * @type {string}
   * @memberof SavedViewUpdateSavedviewsAPI
   */
  groupId?: string;
  /**
   * Saved View Name
   * @type {string}
   * @memberof SavedViewUpdateSavedviewsAPI
   */
  displayName?: string;
  /**
   * Flag for whether or not Saved View is shared
   * @type {boolean}
   * @memberof SavedViewUpdateSavedviewsAPI
   */
  shared?: boolean;
  /**
   * Tags of Saved View
   * @type {Array<string>}
   * @memberof SavedViewUpdateSavedviewsAPI
   */
  tagIds?: Array<string>;
  /**
   * Saved view category
   * @type {string}
   * @memberof SavedViewUpdateSavedviewsAPI
   */
  category?: string;
}
/**
 *
 * @export
 * @interface SavedViewWithDataSavedviewsAPI
 */
export interface SavedViewWithDataSavedviewsAPI {
  /**
   * Unique identifier
   * @type {string}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  id: string;
  /**
   * User visible name
   * @type {string}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  displayName: string;
  /**
   * Flag for whether or not element is shared
   * @type {boolean}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  shared: boolean;
  /**
   * Category of Saved View
   * @type {string}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  category?: string;
  /**
   * Tags of Saved View
   * @type {Array<SavedViewTagSavedviewsAPI>}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  tags?: Array<SavedViewTagSavedviewsAPI>;
  /**
   *
   * @type {SavedViewLinksSavedviewsAPI}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  _links: SavedViewLinksSavedviewsAPI;
  /**
   *
   * @type {ViewWithLegacySavedviewsAPI}
   * @memberof SavedViewWithDataSavedviewsAPI
   */
  savedViewData: ViewWithLegacySavedviewsAPI;
}
/**
 *
 * @export
 * @interface TagCreateSavedviewsAPI
 */
export interface TagCreateSavedviewsAPI {
  /**
   * Connected project ID
   * @type {string}
   * @memberof TagCreateSavedviewsAPI
   */
  projectId: string;
  /**
   * IModel ID
   * @type {string}
   * @memberof TagCreateSavedviewsAPI
   */
  iModelId?: string;
  /**
   * Tag Name
   * @type {string}
   * @memberof TagCreateSavedviewsAPI
   */
  displayName: string;
}
/**
 *
 * @export
 * @interface TagLinksSavedviewsAPI
 */
export interface TagLinksSavedviewsAPI {
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof TagLinksSavedviewsAPI
   */
  project: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof TagLinksSavedviewsAPI
   */
  imodel?: LinkSavedviewsAPI;
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof TagLinksSavedviewsAPI
   */
  creator: LinkSavedviewsAPI;
}
/**
 *
 * @export
 * @interface TagListLinksSavedviewsAPI
 */
export interface TagListLinksSavedviewsAPI {
  /**
   *
   * @type {LinkSavedviewsAPI}
   * @memberof TagListLinksSavedviewsAPI
   */
  self: LinkSavedviewsAPI;
}
/**
 *
 * @export
 * @interface TagListResponseSavedviewsAPI
 */
export interface TagListResponseSavedviewsAPI {
  /**
   * Requested tags
   * @type {Array<TagSavedviewsAPI>}
   * @memberof TagListResponseSavedviewsAPI
   */
  tags: Array<TagSavedviewsAPI>;
  /**
   *
   * @type {TagListLinksSavedviewsAPI}
   * @memberof TagListResponseSavedviewsAPI
   */
  _links: TagListLinksSavedviewsAPI;
}
/**
 *
 * @export
 * @interface TagResponseSavedviewsAPI
 */
export interface TagResponseSavedviewsAPI {
  /**
   *
   * @type {TagSavedviewsAPI}
   * @memberof TagResponseSavedviewsAPI
   */
  tag: TagSavedviewsAPI;
}
/**
 *
 * @export
 * @interface TagSavedviewsAPI
 */
export interface TagSavedviewsAPI {
  /**
   * Unique identifier
   * @type {string}
   * @memberof TagSavedviewsAPI
   */
  id: string;
  /**
   * User visible name
   * @type {string}
   * @memberof TagSavedviewsAPI
   */
  displayName: string;
  /**
   *
   * @type {TagLinksSavedviewsAPI}
   * @memberof TagSavedviewsAPI
   */
  _links: TagLinksSavedviewsAPI;
}
/**
 *
 * @export
 * @interface TagUpdateSavedviewsAPI
 */
export interface TagUpdateSavedviewsAPI {
  /**
   * Tag Name
   * @type {string}
   * @memberof TagUpdateSavedviewsAPI
   */
  displayName?: string;
}
/**
 *
 * @export
 * @interface ViewCameraSavedviewsAPI
 */
export interface ViewCameraSavedviewsAPI {
  /**
   * Angle of the camera lens, in degrees
   * @type {number}
   * @memberof ViewCameraSavedviewsAPI
   */
  lens: number;
  /**
   * Focal distance of the lens, in meters
   * @type {number}
   * @memberof ViewCameraSavedviewsAPI
   */
  focusDist: number;
  /**
   * Location of the eye of the camera. (Array of numbers representing x, y and z)
   * @type {Array<number>}
   * @memberof ViewCameraSavedviewsAPI
   */
  eye: Array<number>;
}
/**
 *
 * @export
 * @interface ViewItwin3dSavedviewsAPI
 */
export interface ViewItwin3dSavedviewsAPI {
  /**
   * The lower left back corner of the view frustum. (Array of numbers representing x, y and z)
   * @type {Array<number>}
   * @memberof ViewItwin3dSavedviewsAPI
   */
  origin: Array<number>;
  /**
   * The extent of the view frustum. (Array of numbers representing x, y and z)
   * @type {Array<number>}
   * @memberof ViewItwin3dSavedviewsAPI
   */
  extents: Array<number>;
  /**
   *
   * @type {ViewYawPitchRollSavedviewsAPI}
   * @memberof ViewItwin3dSavedviewsAPI
   */
  angles?: ViewYawPitchRollSavedviewsAPI;
  /**
   *
   * @type {ViewCameraSavedviewsAPI}
   * @memberof ViewItwin3dSavedviewsAPI
   */
  camera?: ViewCameraSavedviewsAPI;
  /**
   *
   * @type {ViewVisibilityListSavedviewsAPI}
   * @memberof ViewItwin3dSavedviewsAPI
   */
  categories?: ViewVisibilityListSavedviewsAPI;
  /**
   *
   * @type {ViewVisibilityListSavedviewsAPI}
   * @memberof ViewItwin3dSavedviewsAPI
   */
  models?: ViewVisibilityListSavedviewsAPI;
}
/**
 *
 * @export
 * @interface ViewItwinDrawingSavedviewsAPI
 */
export interface ViewItwinDrawingSavedviewsAPI {
  /**
   * Base model Id
   * @type {string}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  baseModelId: string;
  /**
   * Origin. (Array of numbers representing x and y)
   * @type {Array<number>}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  origin: Array<number>;
  /**
   * Delta. (Array of numbers representing x and y)
   * @type {Array<number>}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  delta: Array<number>;
  /**
   * Angle, in degrees.
   * @type {number}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  angle: number;
  /**
   *
   * @type {ViewVisibilityListSavedviewsAPI}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  categories?: ViewVisibilityListSavedviewsAPI;
  /**
   * The Id of the spatial view from which the SectionDrawing was generated.
   * @type {string}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  spatialView?: string;
  /**
   * If true, the spatial view should be displayed in the context of the drawing view.
   * @type {boolean}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  displaySpatialView?: boolean;
  /**
   * Transform from drawing coordinates to spatial coordinates. If undefined, use identity transform. 3 X 4 transformation matrix containing 3 arrays of matrix rows consisting of 4 numbers each: [qx qy qz ax] where the fourth columnn in each row holds the translation.
   * @type {Array<Array<number>>}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  drawingToSpatialTransform?: Array<Array<number>>;
  /**
   * The extents of the DrawingModel, used for determining the upper limits of the view's extents.
   * @type {Array<Array<number>>}
   * @memberof ViewItwinDrawingSavedviewsAPI
   */
  modelExtents: Array<Array<number>>;
}
/**
 *
 * @export
 * @interface ViewItwinSheetSavedviewsAPI
 */
export interface ViewItwinSheetSavedviewsAPI {
  /**
   * Base model Id
   * @type {string}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  baseModelId: string;
  /**
   * Origin. (Array of numbers representing x and y)
   * @type {Array<number>}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  origin: Array<number>;
  /**
   * Delta. (Array of numbers representing x and y)
   * @type {Array<number>}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  delta: Array<number>;
  /**
   * Angle, in degrees.
   * @type {number}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  angle: number;
  /**
   *
   * @type {ViewVisibilityListSavedviewsAPI}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  categories?: ViewVisibilityListSavedviewsAPI;
  /**
   * Width of the sheet, in meters
   * @type {number}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  width?: number;
  /**
   * Height of the sheet, in meters
   * @type {number}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  height?: number;
  /**
   * Scale of the sheet
   * @type {number}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  scale?: number;
  /**
   * Sheet template Id
   * @type {string}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  sheetTemplate?: string;
  /**
   * List of Ids
   * @type {Array<string>}
   * @memberof ViewItwinSheetSavedviewsAPI
   */
  sheetAttachments?: Array<string>;
}
/**
 *
 * @export
 * @interface ViewSavedviewsAPI
 */
export interface ViewSavedviewsAPI {
  /**
   *
   * @type {ViewItwin3dSavedviewsAPI}
   * @memberof ViewSavedviewsAPI
   */
  itwin3dView?: ViewItwin3dSavedviewsAPI;
  /**
   *
   * @type {ViewItwinSheetSavedviewsAPI}
   * @memberof ViewSavedviewsAPI
   */
  itwinSheetView?: ViewItwinSheetSavedviewsAPI;
  /**
   *
   * @type {ViewItwinDrawingSavedviewsAPI}
   * @memberof ViewSavedviewsAPI
   */
  itwinDrawingView?: ViewItwinDrawingSavedviewsAPI;
  /**
   * Application specific data, not controlled
   * @type {any}
   * @memberof ViewSavedviewsAPI
   */
  appData?: any;
}
/**
 *
 * @export
 * @interface ViewVisibilityListSavedviewsAPI
 */
export interface ViewVisibilityListSavedviewsAPI {
  /**
   * List of Ids that should be enabled/visible.
   * @type {Array<string>}
   * @memberof ViewVisibilityListSavedviewsAPI
   */
  enabled?: Array<string>;
  /**
   * List of Ids that should be disabled/hidden.
   * @type {Array<string>}
   * @memberof ViewVisibilityListSavedviewsAPI
   */
  disabled?: Array<string>;
}
/**
 *
 * @export
 * @interface ViewWithLegacySavedviewsAPI
 */
export interface ViewWithLegacySavedviewsAPI {
  /**
   *
   * @type {ViewItwin3dSavedviewsAPI}
   * @memberof ViewWithLegacySavedviewsAPI
   */
  itwin3dView?: ViewItwin3dSavedviewsAPI;
  /**
   *
   * @type {ViewItwinSheetSavedviewsAPI}
   * @memberof ViewWithLegacySavedviewsAPI
   */
  itwinSheetView?: ViewItwinSheetSavedviewsAPI;
  /**
   *
   * @type {ViewItwinDrawingSavedviewsAPI}
   * @memberof ViewWithLegacySavedviewsAPI
   */
  itwinDrawingView?: ViewItwinDrawingSavedviewsAPI;
  /**
   * Application specific data, not controlled
   * @type {any}
   * @memberof ViewWithLegacySavedviewsAPI
   */
  appData?: any;
  /**
   * Legacy data, un-updatable, will soon be deprecated move to new service
   * @type {any}
   * @memberof ViewWithLegacySavedviewsAPI
   */
  legacyView?: any;
}
/**
 *
 * @export
 * @interface ViewYawPitchRollSavedviewsAPI
 */
export interface ViewYawPitchRollSavedviewsAPI {
  /**
   * Yaw (rotation of x towards y) of the orientation, in degrees
   * @type {number}
   * @memberof ViewYawPitchRollSavedviewsAPI
   */
  yaw?: number;
  /**
   * Pitch (rotation that raises x towards z) of the orientation, in degrees
   * @type {number}
   * @memberof ViewYawPitchRollSavedviewsAPI
   */
  pitch?: number;
  /**
   * Roll (rotation of y towards z) of the orientation, in degrees
   * @type {number}
   * @memberof ViewYawPitchRollSavedviewsAPI
   */
  roll?: number;
}
/**
 * GroupsApi - fetch parameter creator
 * @export
 */
export const GroupsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Creates a group to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create group
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {GroupCreateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      Authorization: string,
      body?: GroupCreateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createGroup."
        );
      }
      const localVarPath = `/groups`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"GroupCreateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a group, saved views assigned to that group will not be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      groupId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling deleteGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteGroup."
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves all groups associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all groups
     * @param {string} projectId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [iModelId]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroups(
      projectId: string,
      Authorization: string,
      iModelId?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getAllGroups."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getAllGroups."
        );
      }
      const localVarPath = `/groups`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (iModelId !== undefined) {
        localVarQueryParameter["iModelId"] = iModelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves information for a single group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      groupId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling getGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getGroup."
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {GroupUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      groupId: string,
      Authorization: string,
      body?: GroupUpdateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling updateGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateGroup."
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"GroupUpdateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Creates a group to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create group
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {GroupCreateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      Authorization: string,
      body?: GroupCreateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupResponseSavedviewsAPI> {
      const localVarFetchArgs = GroupsApiFetchParamCreator(
        configuration
      ).createGroup(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a group, saved views assigned to that group will not be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = GroupsApiFetchParamCreator(
        configuration
      ).deleteGroup(groupId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves all groups associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all groups
     * @param {string} projectId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [iModelId]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroups(
      projectId: string,
      Authorization: string,
      iModelId?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupListResponseSavedviewsAPI> {
      const localVarFetchArgs = GroupsApiFetchParamCreator(
        configuration
      ).getAllGroups(projectId, Authorization, iModelId, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves information for a single group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupResponseSavedviewsAPI> {
      const localVarFetchArgs = GroupsApiFetchParamCreator(
        configuration
      ).getGroup(groupId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {GroupUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      groupId: string,
      Authorization: string,
      body?: GroupUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupResponseSavedviewsAPI> {
      const localVarFetchArgs = GroupsApiFetchParamCreator(
        configuration
      ).updateGroup(groupId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Creates a group to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create group
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {GroupCreateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      Authorization: string,
      body?: GroupCreateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return GroupsApiFp(configuration).createGroup(
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a group, saved views assigned to that group will not be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return GroupsApiFp(configuration).deleteGroup(
        groupId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves all groups associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all groups
     * @param {string} projectId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [iModelId]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroups(
      projectId: string,
      Authorization: string,
      iModelId?: string,
      Accept?: string,
      options?: any
    ) {
      return GroupsApiFp(configuration).getAllGroups(
        projectId,
        Authorization,
        iModelId,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves information for a single group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return GroupsApiFp(configuration).getGroup(
        groupId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update group
     * @param {string} groupId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {GroupUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      groupId: string,
      Authorization: string,
      body?: GroupUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return GroupsApiFp(configuration).updateGroup(
        groupId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
  /**
   * ---    Creates a group to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Create group
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {GroupCreateSavedviewsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public createGroup(
    Authorization: string,
    body?: GroupCreateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return GroupsApiFp(this.configuration).createGroup(
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a group, saved views assigned to that group will not be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Delete group
   * @param {string} groupId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public deleteGroup(
    groupId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return GroupsApiFp(this.configuration).deleteGroup(
      groupId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves all groups associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get all groups
   * @param {string} projectId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [iModelId]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getAllGroups(
    projectId: string,
    Authorization: string,
    iModelId?: string,
    Accept?: string,
    options?: any
  ) {
    return GroupsApiFp(this.configuration).getAllGroups(
      projectId,
      Authorization,
      iModelId,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves information for a single group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get group
   * @param {string} groupId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroup(
    groupId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return GroupsApiFp(this.configuration).getGroup(
      groupId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Update group
   * @param {string} groupId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {GroupUpdateSavedviewsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public updateGroup(
    groupId: string,
    Authorization: string,
    body?: GroupUpdateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return GroupsApiFp(this.configuration).updateGroup(
      groupId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ImagesApi - fetch parameter creator
 * @export
 */
export const ImagesApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Allow uploading an image representing the saved view. Image will be available at full size and as a thumbnail size.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update image
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {ImageUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addImage(
      savedViewId: string,
      Authorization: string,
      body?: ImageUpdateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'savedViewId' is not null or undefined
      if (savedViewId === null || savedViewId === undefined) {
        throw new RequiredError(
          "savedViewId",
          "Required parameter savedViewId was null or undefined when calling addImage."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling addImage."
        );
      }
      const localVarPath = `/{savedViewId}/image`.replace(
        `{${"savedViewId"}}`,
        encodeURIComponent(String(savedViewId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ImageUpdateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Generates or retrieves an Url for the image or thumbnail associated to a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get image
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [size]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImage(
      savedViewId: string,
      Authorization: string,
      size?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'savedViewId' is not null or undefined
      if (savedViewId === null || savedViewId === undefined) {
        throw new RequiredError(
          "savedViewId",
          "Required parameter savedViewId was null or undefined when calling getImage."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getImage."
        );
      }
      const localVarPath = `/{savedViewId}/image`.replace(
        `{${"savedViewId"}}`,
        encodeURIComponent(String(savedViewId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Allow uploading an image representing the saved view. Image will be available at full size and as a thumbnail size.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update image
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {ImageUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addImage(
      savedViewId: string,
      Authorization: string,
      body?: ImageUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ImagesApiFetchParamCreator(
        configuration
      ).addImage(savedViewId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Generates or retrieves an Url for the image or thumbnail associated to a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get image
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [size]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImage(
      savedViewId: string,
      Authorization: string,
      size?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ImageResponseSavedviewsAPI> {
      const localVarFetchArgs = ImagesApiFetchParamCreator(
        configuration
      ).getImage(savedViewId, Authorization, size, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Allow uploading an image representing the saved view. Image will be available at full size and as a thumbnail size.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update image
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {ImageUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addImage(
      savedViewId: string,
      Authorization: string,
      body?: ImageUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return ImagesApiFp(configuration).addImage(
        savedViewId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Generates or retrieves an Url for the image or thumbnail associated to a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get image
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [size]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImage(
      savedViewId: string,
      Authorization: string,
      size?: string,
      Accept?: string,
      options?: any
    ) {
      return ImagesApiFp(configuration).getImage(
        savedViewId,
        Authorization,
        size,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
  /**
   * ---    Allow uploading an image representing the saved view. Image will be available at full size and as a thumbnail size.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Update image
   * @param {string} savedViewId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {ImageUpdateSavedviewsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public addImage(
    savedViewId: string,
    Authorization: string,
    body?: ImageUpdateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return ImagesApiFp(this.configuration).addImage(
      savedViewId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Generates or retrieves an Url for the image or thumbnail associated to a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get image
   * @param {string} savedViewId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [size]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getImage(
    savedViewId: string,
    Authorization: string,
    size?: string,
    Accept?: string,
    options?: any
  ) {
    return ImagesApiFp(this.configuration).getImage(
      savedViewId,
      Authorization,
      size,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * SavedViewsApi - fetch parameter creator
 * @export
 */
export const SavedViewsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Creates a saved view. The saved view must include one an only view: 3D, Sheet or Drawing.   Additional custom information can be stored in the appData field.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create saved view
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {SavedViewCreateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSavedview(
      Authorization: string,
      body?: SavedViewCreateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createSavedview."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"SavedViewCreateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a saved view, images assigned to that saved view will be deleted as well.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedview(
      savedViewId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'savedViewId' is not null or undefined
      if (savedViewId === null || savedViewId === undefined) {
        throw new RequiredError(
          "savedViewId",
          "Required parameter savedViewId was null or undefined when calling deleteSavedview."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteSavedview."
        );
      }
      const localVarPath = `/{savedViewId}`.replace(
        `{${"savedViewId"}}`,
        encodeURIComponent(String(savedViewId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves all saved view associated to a project, project/iModel combination or group, at least one parameter must be provided.    This operation supports pagination and will sort saved views by displayName.    As the view data can be quite large, this collection call will not contain the view data themselves. To retrieve the data, make a call to [Get saved view](../get-savedview)    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all saved views
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [projectId]
     * @param {string} [iModelId]
     * @param {string} [groupId]
     * @param {number} [top]
     * @param {number} [skip]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSavedviews(
      Authorization: string,
      projectId?: string,
      iModelId?: string,
      groupId?: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getAllSavedviews."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (iModelId !== undefined) {
        localVarQueryParameter["iModelId"] = iModelId;
      }

      if (groupId !== undefined) {
        localVarQueryParameter["groupId"] = groupId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a saved view including the complete view data itself.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedview(
      savedViewId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'savedViewId' is not null or undefined
      if (savedViewId === null || savedViewId === undefined) {
        throw new RequiredError(
          "savedViewId",
          "Required parameter savedViewId was null or undefined when calling getSavedview."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getSavedview."
        );
      }
      const localVarPath = `/{savedViewId}`.replace(
        `{${"savedViewId"}}`,
        encodeURIComponent(String(savedViewId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Updates saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {SavedViewUpdateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSavedview(
      savedViewId: string,
      Authorization: string,
      body?: SavedViewUpdateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'savedViewId' is not null or undefined
      if (savedViewId === null || savedViewId === undefined) {
        throw new RequiredError(
          "savedViewId",
          "Required parameter savedViewId was null or undefined when calling updateSavedview."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateSavedview."
        );
      }
      const localVarPath = `/{savedViewId}`.replace(
        `{${"savedViewId"}}`,
        encodeURIComponent(String(savedViewId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"SavedViewUpdateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SavedViewsApi - functional programming interface
 * @export
 */
export const SavedViewsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Creates a saved view. The saved view must include one an only view: 3D, Sheet or Drawing.   Additional custom information can be stored in the appData field.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create saved view
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {SavedViewCreateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSavedview(
      Authorization: string,
      body?: SavedViewCreateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<SavedViewResponseSavedviewsAPI> {
      const localVarFetchArgs = SavedViewsApiFetchParamCreator(
        configuration
      ).createSavedview(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a saved view, images assigned to that saved view will be deleted as well.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedview(
      savedViewId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = SavedViewsApiFetchParamCreator(
        configuration
      ).deleteSavedview(savedViewId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves all saved view associated to a project, project/iModel combination or group, at least one parameter must be provided.    This operation supports pagination and will sort saved views by displayName.    As the view data can be quite large, this collection call will not contain the view data themselves. To retrieve the data, make a call to [Get saved view](../get-savedview)    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all saved views
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [projectId]
     * @param {string} [iModelId]
     * @param {string} [groupId]
     * @param {number} [top]
     * @param {number} [skip]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSavedviews(
      Authorization: string,
      projectId?: string,
      iModelId?: string,
      groupId?: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<SavedViewListResponseSavedviewsAPI> {
      const localVarFetchArgs = SavedViewsApiFetchParamCreator(
        configuration
      ).getAllSavedviews(
        Authorization,
        projectId,
        iModelId,
        groupId,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a saved view including the complete view data itself.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedview(
      savedViewId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<SavedViewResponseSavedviewsAPI> {
      const localVarFetchArgs = SavedViewsApiFetchParamCreator(
        configuration
      ).getSavedview(savedViewId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Updates saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {SavedViewUpdateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSavedview(
      savedViewId: string,
      Authorization: string,
      body?: SavedViewUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<SavedViewResponseSavedviewsAPI> {
      const localVarFetchArgs = SavedViewsApiFetchParamCreator(
        configuration
      ).updateSavedview(savedViewId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * SavedViewsApi - factory interface
 * @export
 */
export const SavedViewsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Creates a saved view. The saved view must include one an only view: 3D, Sheet or Drawing.   Additional custom information can be stored in the appData field.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create saved view
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {SavedViewCreateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSavedview(
      Authorization: string,
      body?: SavedViewCreateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return SavedViewsApiFp(configuration).createSavedview(
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a saved view, images assigned to that saved view will be deleted as well.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedview(
      savedViewId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return SavedViewsApiFp(configuration).deleteSavedview(
        savedViewId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves all saved view associated to a project, project/iModel combination or group, at least one parameter must be provided.    This operation supports pagination and will sort saved views by displayName.    As the view data can be quite large, this collection call will not contain the view data themselves. To retrieve the data, make a call to [Get saved view](../get-savedview)    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all saved views
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [projectId]
     * @param {string} [iModelId]
     * @param {string} [groupId]
     * @param {number} [top]
     * @param {number} [skip]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSavedviews(
      Authorization: string,
      projectId?: string,
      iModelId?: string,
      groupId?: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return SavedViewsApiFp(configuration).getAllSavedviews(
        Authorization,
        projectId,
        iModelId,
        groupId,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a saved view including the complete view data itself.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedview(
      savedViewId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return SavedViewsApiFp(configuration).getSavedview(
        savedViewId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Updates saved view
     * @param {string} savedViewId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {SavedViewUpdateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSavedview(
      savedViewId: string,
      Authorization: string,
      body?: SavedViewUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return SavedViewsApiFp(configuration).updateSavedview(
        savedViewId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * SavedViewsApi - object-oriented interface
 * @export
 * @class SavedViewsApi
 * @extends {BaseAPI}
 */
export class SavedViewsApi extends BaseAPI {
  /**
   * ---    Creates a saved view. The saved view must include one an only view: 3D, Sheet or Drawing.   Additional custom information can be stored in the appData field.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Create saved view
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {SavedViewCreateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SavedViewsApi
   */
  public createSavedview(
    Authorization: string,
    body?: SavedViewCreateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return SavedViewsApiFp(this.configuration).createSavedview(
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a saved view, images assigned to that saved view will be deleted as well.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Delete saved view
   * @param {string} savedViewId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SavedViewsApi
   */
  public deleteSavedview(
    savedViewId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return SavedViewsApiFp(this.configuration).deleteSavedview(
      savedViewId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves all saved view associated to a project, project/iModel combination or group, at least one parameter must be provided.    This operation supports pagination and will sort saved views by displayName.    As the view data can be quite large, this collection call will not contain the view data themselves. To retrieve the data, make a call to [Get saved view](../get-savedview)    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get all saved views
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [projectId]
   * @param {string} [iModelId]
   * @param {string} [groupId]
   * @param {number} [top]
   * @param {number} [skip]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SavedViewsApi
   */
  public getAllSavedviews(
    Authorization: string,
    projectId?: string,
    iModelId?: string,
    groupId?: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return SavedViewsApiFp(this.configuration).getAllSavedviews(
      Authorization,
      projectId,
      iModelId,
      groupId,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a saved view including the complete view data itself.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get saved view
   * @param {string} savedViewId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SavedViewsApi
   */
  public getSavedview(
    savedViewId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return SavedViewsApiFp(this.configuration).getSavedview(
      savedViewId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a saved view.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Updates saved view
   * @param {string} savedViewId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {SavedViewUpdateSavedviewsAPI} [body] Please use https://www.itwinjs.org/reference/imodeljs-common/views/viewstateprops/ for reference
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SavedViewsApi
   */
  public updateSavedview(
    savedViewId: string,
    Authorization: string,
    body?: SavedViewUpdateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return SavedViewsApiFp(this.configuration).updateSavedview(
      savedViewId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * TagsApi - fetch parameter creator
 * @export
 */
export const TagsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Creates a tag to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create tag
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {TagCreateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(
      Authorization: string,
      body?: TagCreateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createTag."
        );
      }
      const localVarPath = `/tags`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"TagCreateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a tag, tags must be unassigned from every saved view before they can be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(
      tagId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new RequiredError(
          "tagId",
          "Required parameter tagId was null or undefined when calling deleteTag."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteTag."
        );
      }
      const localVarPath = `/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves all tags associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all tags
     * @param {string} projectId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [iModelId]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTags(
      projectId: string,
      Authorization: string,
      iModelId?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getAllTags."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getAllTags."
        );
      }
      const localVarPath = `/tags`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (iModelId !== undefined) {
        localVarQueryParameter["iModelId"] = iModelId;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves information for a single tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(
      tagId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new RequiredError(
          "tagId",
          "Required parameter tagId was null or undefined when calling getTag."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getTag."
        );
      }
      const localVarPath = `/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Renames a tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {TagUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(
      tagId: string,
      Authorization: string,
      body?: TagUpdateSavedviewsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new RequiredError(
          "tagId",
          "Required parameter tagId was null or undefined when calling updateTag."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateTag."
        );
      }
      const localVarPath = `/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"TagUpdateSavedviewsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Creates a tag to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create tag
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {TagCreateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(
      Authorization: string,
      body?: TagCreateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<TagResponseSavedviewsAPI> {
      const localVarFetchArgs = TagsApiFetchParamCreator(
        configuration
      ).createTag(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a tag, tags must be unassigned from every saved view before they can be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(
      tagId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = TagsApiFetchParamCreator(
        configuration
      ).deleteTag(tagId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves all tags associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all tags
     * @param {string} projectId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [iModelId]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTags(
      projectId: string,
      Authorization: string,
      iModelId?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<TagListResponseSavedviewsAPI> {
      const localVarFetchArgs = TagsApiFetchParamCreator(
        configuration
      ).getAllTags(projectId, Authorization, iModelId, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves information for a single tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(
      tagId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<TagResponseSavedviewsAPI> {
      const localVarFetchArgs = TagsApiFetchParamCreator(configuration).getTag(
        tagId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Renames a tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {TagUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(
      tagId: string,
      Authorization: string,
      body?: TagUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<TagResponseSavedviewsAPI> {
      const localVarFetchArgs = TagsApiFetchParamCreator(
        configuration
      ).updateTag(tagId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Creates a tag to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Create tag
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {TagCreateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(
      Authorization: string,
      body?: TagCreateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return TagsApiFp(configuration).createTag(
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a tag, tags must be unassigned from every saved view before they can be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Delete tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(
      tagId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return TagsApiFp(configuration).deleteTag(
        tagId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves all tags associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get all tags
     * @param {string} projectId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [iModelId]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTags(
      projectId: string,
      Authorization: string,
      iModelId?: string,
      Accept?: string,
      options?: any
    ) {
      return TagsApiFp(configuration).getAllTags(
        projectId,
        Authorization,
        iModelId,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves information for a single tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(
      tagId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return TagsApiFp(configuration).getTag(
        tagId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Renames a tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Update tag
     * @param {string} tagId
     * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
     * @param {TagUpdateSavedviewsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(
      tagId: string,
      Authorization: string,
      body?: TagUpdateSavedviewsAPI,
      Accept?: string,
      options?: any
    ) {
      return TagsApiFp(configuration).updateTag(
        tagId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
  /**
   * ---    Creates a tag to organize saved views.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Create tag
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {TagCreateSavedviewsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public createTag(
    Authorization: string,
    body?: TagCreateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return TagsApiFp(this.configuration).createTag(
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a tag, tags must be unassigned from every saved view before they can be deleted.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Delete tag
   * @param {string} tagId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public deleteTag(
    tagId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return TagsApiFp(this.configuration).deleteTag(
      tagId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves all tags associated to a project or project/iModel combination.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get all tags
   * @param {string} projectId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [iModelId]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public getAllTags(
    projectId: string,
    Authorization: string,
    iModelId?: string,
    Accept?: string,
    options?: any
  ) {
    return TagsApiFp(this.configuration).getAllTags(
      projectId,
      Authorization,
      iModelId,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves information for a single tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get tag
   * @param {string} tagId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public getTag(
    tagId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return TagsApiFp(this.configuration).getTag(
      tagId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Renames a tag.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `savedviews:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Update tag
   * @param {string} tagId
   * @param {string} Authorization OAuth access token with scope &#x60;savedviews:modify&#x60;
   * @param {TagUpdateSavedviewsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public updateTag(
    tagId: string,
    Authorization: string,
    body?: TagUpdateSavedviewsAPI,
    Accept?: string,
    options?: any
  ) {
    return TagsApiFp(this.configuration).updateTag(
      tagId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
