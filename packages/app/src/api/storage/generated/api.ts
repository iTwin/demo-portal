/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *
 * This code is for demonstration purposes and should not be considered production ready.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Storage
 * Storage API allowing quick files managing
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import * as isomorphicFetch from "isomorphic-fetch";
import * as url from "url";

import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/storage".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * Error representation.
 * @export
 * @interface ErrorStorageAPI
 */
export interface ErrorStorageAPI {
  /**
   * Error message.
   * @type {string}
   * @memberof ErrorStorageAPI
   */
  message?: string;
  /**
   * Error code.
   * @type {string}
   * @memberof ErrorStorageAPI
   */
  code?: string;
}
/**
 * Model for file creation.
 * @export
 * @interface FileCreateStorageAPI
 */
export interface FileCreateStorageAPI {
  /**
   * Display name of the file.
   * @type {string}
   * @memberof FileCreateStorageAPI
   */
  displayName: string;
  /**
   * Description of the file.
   * @type {string}
   * @memberof FileCreateStorageAPI
   */
  description?: string;
}
/**
 * Retrieved file response containing file.
 * @export
 * @interface FileResponseStorageAPI
 */
export interface FileResponseStorageAPI {
  /**
   *
   * @type {FileStorageAPI}
   * @memberof FileResponseStorageAPI
   */
  file?: FileStorageAPI;
}
/**
 *
 * @export
 * @interface FileStorageAPI
 */
export interface FileStorageAPI {
  /**
   * Unique Identifier of the file.
   * @type {string}
   * @memberof FileStorageAPI
   */
  id?: string;
  /**
   * Display name of the file.
   * @type {string}
   * @memberof FileStorageAPI
   */
  displayName?: string;
  /**
   * Description of the file.
   * @type {string}
   * @memberof FileStorageAPI
   */
  description?: string;
  /**
   * Absolute path to the file.
   * @type {string}
   * @memberof FileStorageAPI
   */
  path?: string;
  /**
   * Size to the file in bytes.
   * @type {number}
   * @memberof FileStorageAPI
   */
  size?: number;
  /**
   * Display name of the user who modified file last.
   * @type {string}
   * @memberof FileStorageAPI
   */
  lastModifiedByDisplayName?: string;
  /**
   * Date when the file was created.
   * @type {string}
   * @memberof FileStorageAPI
   */
  createdDateTime?: string;
  /**
   * Date when the file was last time modified.
   * @type {string}
   * @memberof FileStorageAPI
   */
  lastModifiedDateTime?: string;
  /**
   * Unique Identifier of the parent folder.
   * @type {string}
   * @memberof FileStorageAPI
   */
  parentFolderId?: string;
  /**
   *
   * @type {LinksItemStorageAPI}
   * @memberof FileStorageAPI
   */
  _links?: LinksItemStorageAPI;
}
/**
 *
 * @export
 * @interface FileTypedStorageAPI
 */
export interface FileTypedStorageAPI {
  /**
   * Unique Identifier of the file.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  id?: string;
  /**
   * Identification of the file entity.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  type?: FileTypedStorageAPI.TypeStorageAPIEnum;
  /**
   * Display name of the file.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  displayName?: string;
  /**
   * Description of the file.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  description?: string;
  /**
   * Absolute path to the file.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  path?: string;
  /**
   * Size to the file in bytes.
   * @type {number}
   * @memberof FileTypedStorageAPI
   */
  size?: number;
  /**
   * Display name of the user who modified file last.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  lastModifiedByDisplayName?: string;
  /**
   * Date when the file was created.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  createdDateTime?: string;
  /**
   * Date when the file was last time modified.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  lastModifiedDateTime?: string;
  /**
   * Unique Identifier of the parent folder.
   * @type {string}
   * @memberof FileTypedStorageAPI
   */
  parentFolderId?: string;
  /**
   *
   * @type {LinksItemStorageAPI}
   * @memberof FileTypedStorageAPI
   */
  _links?: LinksItemStorageAPI;
}

/**
 * @export
 * @namespace FileTypedStorageAPI
 */
export namespace FileTypedStorageAPI {
  /**
   * @export
   * @enum {string}
   */
  export enum TypeStorageAPIEnum {
    File = <any>"file",
  }
}
/**
 * Model for file update.
 * @export
 * @interface FileUpdateStorageAPI
 */
export interface FileUpdateStorageAPI {
  /**
   * Display name of the file.
   * @type {string}
   * @memberof FileUpdateStorageAPI
   */
  displayName?: string;
  /**
   * Description of the file.
   * @type {string}
   * @memberof FileUpdateStorageAPI
   */
  description?: string;
}
/**
 * Model for file upload.
 * @export
 * @interface FileUploadStorageAPI
 */
export interface FileUploadStorageAPI {
  /**
   *
   * @type {LinksUploadStorageAPI}
   * @memberof FileUploadStorageAPI
   */
  _links?: LinksUploadStorageAPI;
}
/**
 * List of files.
 * @export
 * @interface FilesStorageAPI
 */
export interface FilesStorageAPI {
  /**
   *
   * @type {Array<FileStorageAPI>}
   * @memberof FilesStorageAPI
   */
  files?: Array<FileStorageAPI>;
  /**
   *
   * @type {LinksPagingStorageAPI}
   * @memberof FilesStorageAPI
   */
  _links?: LinksPagingStorageAPI;
}
/**
 * Model for folder creation.
 * @export
 * @interface FolderCreateStorageAPI
 */
export interface FolderCreateStorageAPI {
  /**
   * Display name of the folder.
   * @type {string}
   * @memberof FolderCreateStorageAPI
   */
  displayName: string;
  /**
   * Description of the folder.
   * @type {string}
   * @memberof FolderCreateStorageAPI
   */
  description?: string;
}
/**
 * Retrieved folder response containing folder.
 * @export
 * @interface FolderResponseStorageAPI
 */
export interface FolderResponseStorageAPI {
  /**
   *
   * @type {FolderStorageAPI}
   * @memberof FolderResponseStorageAPI
   */
  folder?: FolderStorageAPI;
}
/**
 * Full representation of the folder.
 * @export
 * @interface FolderStorageAPI
 */
export interface FolderStorageAPI {
  /**
   * Unique Identifier of the folder.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  id?: string;
  /**
   * Display name of the folder.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  displayName?: string;
  /**
   * Description of the folder.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  description?: string;
  /**
   * Absolute path to the folder.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  path?: string;
  /**
   * Display name of the user who modified folder last.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  lastModifiedByDisplayName?: string;
  /**
   * Date when the folder was created.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  createdDateTime?: string;
  /**
   * Date when the folder was last time modified.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  lastModifiedDateTime?: string;
  /**
   * Unique Identifier of the parent folder.
   * @type {string}
   * @memberof FolderStorageAPI
   */
  parentFolderId?: string;
  /**
   *
   * @type {LinksItemStorageAPI}
   * @memberof FolderStorageAPI
   */
  _links?: LinksItemStorageAPI;
}
/**
 * Full representation of the folder with folder type.
 * @export
 * @interface FolderTypedStorageAPI
 */
export interface FolderTypedStorageAPI {
  /**
   * Unique Identifier of the folder.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  id?: string;
  /**
   * Identification of the folder entity.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  type?: FolderTypedStorageAPI.TypeStorageAPIEnum;
  /**
   * Display name of the folder.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  displayName?: string;
  /**
   * Description of the folder.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  description?: string;
  /**
   * Absolute path to the folder.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  path?: string;
  /**
   * Display name of the user who modified folder last.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  lastModifiedByDisplayName?: string;
  /**
   * Date when the folder was created.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  createdDateTime?: string;
  /**
   * Date when the folder was last time modified.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  lastModifiedDateTime?: string;
  /**
   * Unique Identifier of the parent folder.
   * @type {string}
   * @memberof FolderTypedStorageAPI
   */
  parentFolderId?: string;
  /**
   *
   * @type {LinksItemStorageAPI}
   * @memberof FolderTypedStorageAPI
   */
  _links?: LinksItemStorageAPI;
}

/**
 * @export
 * @namespace FolderTypedStorageAPI
 */
export namespace FolderTypedStorageAPI {
  /**
   * @export
   * @enum {string}
   */
  export enum TypeStorageAPIEnum {
    Folder = <any>"folder",
  }
}
/**
 * Model for folder update.
 * @export
 * @interface FolderUpdateStorageAPI
 */
export interface FolderUpdateStorageAPI {
  /**
   * Display name of the folder.
   * @type {string}
   * @memberof FolderUpdateStorageAPI
   */
  displayName?: string;
  /**
   * Description of the folder.
   * @type {string}
   * @memberof FolderUpdateStorageAPI
   */
  description?: string;
}
/**
 * List of folders.
 * @export
 * @interface FoldersStorageAPI
 */
export interface FoldersStorageAPI {
  /**
   * List of folders.
   * @type {Array<FolderStorageAPI>}
   * @memberof FoldersStorageAPI
   */
  folders?: Array<FolderStorageAPI>;
  /**
   *
   * @type {LinksPagingStorageAPI}
   * @memberof FoldersStorageAPI
   */
  _links?: LinksPagingStorageAPI;
}
/**
 * List of folders and files.
 * @export
 * @interface ItemsStorageAPI
 */
export interface ItemsStorageAPI {
  /**
   * List of folders and files.
   * @type {Array<FolderTypedStorageAPI | FileTypedStorageAPI>}
   * @memberof ItemsStorageAPI
   */
  items?: Array<FolderTypedStorageAPI | FileTypedStorageAPI>;
  /**
   *
   * @type {LinksPagingStorageAPI}
   * @memberof ItemsStorageAPI
   */
  _links?: LinksPagingStorageAPI;
}
/**
 *
 * @export
 * @interface ItemsWithFolderLinkStorageAPI
 */
export interface ItemsWithFolderLinkStorageAPI {
  /**
   *
   * @type {Array<FolderTypedStorageAPI | FileTypedStorageAPI>}
   * @memberof ItemsWithFolderLinkStorageAPI
   */
  items?: Array<FolderTypedStorageAPI | FileTypedStorageAPI>;
  /**
   *
   * @type {LinksPagingWithFolderLinkStorageAPI}
   * @memberof ItemsWithFolderLinkStorageAPI
   */
  _links?: LinksPagingWithFolderLinkStorageAPI;
}
/**
 * Hyperlink container.
 * @export
 * @interface LinkStorageAPI
 */
export interface LinkStorageAPI {
  /**
   * Hyperlink to the specific entity.
   * @type {string}
   * @memberof LinkStorageAPI
   */
  href?: string;
}
/**
 * URLs for accessing users' details and parent folder.
 * @export
 * @interface LinksItemStorageAPI
 */
export interface LinksItemStorageAPI {
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksItemStorageAPI
   */
  createdBy?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksItemStorageAPI
   */
  lastModifiedBy?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksItemStorageAPI
   */
  parentFolder?: LinkStorageAPI;
}
/**
 * URLs for redoing the current request, getting to the previous or next page of results, if applicable containg.
 * @export
 * @interface LinksPagingStorageAPI
 */
export interface LinksPagingStorageAPI {
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingStorageAPI
   */
  self?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingStorageAPI
   */
  next?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingStorageAPI
   */
  prev?: LinkStorageAPI;
}
/**
 * URLs for redoing the current request, getting to the previous or next page of results, if applicable containg, and retrieving root folder.
 * @export
 * @interface LinksPagingWithFolderLinkStorageAPI
 */
export interface LinksPagingWithFolderLinkStorageAPI {
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingWithFolderLinkStorageAPI
   */
  self?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingWithFolderLinkStorageAPI
   */
  next?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingWithFolderLinkStorageAPI
   */
  prev?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksPagingWithFolderLinkStorageAPI
   */
  folder?: LinkStorageAPI;
}
/**
 * Hyperlinks for further file upload and confirmation.
 * @export
 * @interface LinksUploadStorageAPI
 */
export interface LinksUploadStorageAPI {
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksUploadStorageAPI
   */
  uploadUrl?: LinkStorageAPI;
  /**
   *
   * @type {LinkStorageAPI}
   * @memberof LinksUploadStorageAPI
   */
  completeUrl?: LinkStorageAPI;
}
/**
 * Minimal error representation.
 * @export
 * @interface MinimalErrorStorageAPI
 */
export interface MinimalErrorStorageAPI {
  /**
   *
   * @type {ErrorStorageAPI}
   * @memberof MinimalErrorStorageAPI
   */
  self?: ErrorStorageAPI;
}
/**
 * FilesApi - fetch parameter creator
 * @export
 */
export const FilesApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Complete file upload
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeFileCreation(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling completeFileCreation."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling completeFileCreation."
        );
      }
      const localVarPath = `/files/{fileId}/complete`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger file needs to be uploaded there are possibility to use Azure libraries to upload file via given Azure SAS url or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Create file
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FileCreateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      folderId: string,
      Authorization: string,
      body?: FileCreateStorageAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling createFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createFile."
        );
      }
      const localVarPath = `/folders/{folderId}/files`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FileCreateStorageAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling deleteFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFile."
        );
      }
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete file from recycle bin
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileFromRecycleBin(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling deleteFileFromRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFileFromRecycleBin."
        );
      }
      const localVarPath = `/recycleBin/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Download file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+octet-stream&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling downloadFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling downloadFile."
        );
      }
      const localVarPath = `/files/{fileId}/download`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling getFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFile."
        );
      }
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/files`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/list`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      const localVarPath = `/recycleBin`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Restore file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling restoreFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling restoreFile."
        );
      }
      const localVarPath = `/recycleBin/files/{fileId}/restore`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/search`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Update file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FileUpdateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      fileId: string,
      Authorization: string,
      body?: FileUpdateStorageAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling updateFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateFile."
        );
      }
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FileUpdateStorageAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update file's content    ### Notes    File update is three steps operation. This request creates hyperlinks for file content update and confirmation. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger files needs to uploaded there are possibility to use Azure libraries or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update file content
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFileContent(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling updateFileContent."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateFileContent."
        );
      }
      const localVarPath = `/files/{fileId}/updateContent`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Complete file upload
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeFileCreation(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<FileResponseStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).completeFileCreation(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger file needs to be uploaded there are possibility to use Azure libraries to upload file via given Azure SAS url or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Create file
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FileCreateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      folderId: string,
      Authorization: string,
      body?: FileCreateStorageAPI,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FileUploadStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).createFile(folderId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).deleteFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete file from recycle bin
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileFromRecycleBin(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).deleteFileFromRecycleBin(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Download file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+octet-stream&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).downloadFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<FileResponseStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FilesStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFilesInFolder(folderId, Authorization, top, skip, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ItemsStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ItemsStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ItemsWithFolderLinkStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Restore file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).restoreFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ItemsStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Update file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FileUpdateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      fileId: string,
      Authorization: string,
      body?: FileUpdateStorageAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<FileResponseStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).updateFile(fileId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update file's content    ### Notes    File update is three steps operation. This request creates hyperlinks for file content update and confirmation. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger files needs to uploaded there are possibility to use Azure libraries or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update file content
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFileContent(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FileUploadStorageAPI> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).updateFileContent(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Complete file upload
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeFileCreation(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).completeFileCreation(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger file needs to be uploaded there are possibility to use Azure libraries to upload file via given Azure SAS url or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Create file
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FileCreateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      folderId: string,
      Authorization: string,
      body?: FileCreateStorageAPI,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).createFile(
        folderId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).deleteFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete file from recycle bin
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileFromRecycleBin(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).deleteFileFromRecycleBin(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Download file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+octet-stream&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).downloadFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).getFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).getFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Restore file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFile(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).restoreFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Update file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FileUpdateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      fileId: string,
      Authorization: string,
      body?: FileUpdateStorageAPI,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).updateFile(
        fileId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update file's content    ### Notes    File update is three steps operation. This request creates hyperlinks for file content update and confirmation. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger files needs to uploaded there are possibility to use Azure libraries or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update file content
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFileContent(
      fileId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FilesApiFp(configuration).updateFileContent(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
  /**
   * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Complete file upload
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public completeFileCreation(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).completeFileCreation(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger file needs to be uploaded there are possibility to use Azure libraries to upload file via given Azure SAS url or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
   * @summary Create file
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {FileCreateStorageAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public createFile(
    folderId: string,
    Authorization: string,
    body?: FileCreateStorageAPI,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).createFile(
      folderId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Delete file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public deleteFile(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).deleteFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Delete file from recycle bin
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public deleteFileFromRecycleBin(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).deleteFileFromRecycleBin(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Download file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+octet-stream&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public downloadFile(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).downloadFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFile(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get files in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFilesInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFilesInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFoldersAndFilesInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFoldersAndFilesInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get folders and files in recycle bin
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFoldersAndFilesInRecycleBin(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFoldersAndFilesInRecycleBin(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get top level folders and files by project
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getTopLevelFoldersAndFilesByProject(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).getTopLevelFoldersAndFilesByProject(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Restore file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public restoreFile(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).restoreFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Search for folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} name Item name
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public searchForFoldersAndFilesInFolder(
    folderId: string,
    name: string,
    Authorization: string,
    skip?: number,
    top?: number,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).searchForFoldersAndFilesInFolder(
      folderId,
      name,
      Authorization,
      skip,
      top,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
   * @summary Update file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {FileUpdateStorageAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public updateFile(
    fileId: string,
    Authorization: string,
    body?: FileUpdateStorageAPI,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).updateFile(
      fileId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update file's content    ### Notes    File update is three steps operation. This request creates hyperlinks for file content update and confirmation. Next two requests need to be executed by using links from the response. Maximum file size to upload with single request is **256 MiB**. If bigger files needs to uploaded there are possibility to use Azure libraries or by uploading file with [multiple requests](https://docs.microsoft.com/en-us/rest/api/storageservices/operations-on-block-blobs).    - **uploadUrl** is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - **completeUrl** should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Update file content
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public updateFileContent(
    fileId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FilesApiFp(this.configuration).updateFileContent(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * FoldersApi - fetch parameter creator
 * @export
 */
export const FoldersApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Create folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FolderCreateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      folderId: string,
      Authorization: string,
      body?: FolderCreateStorageAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling createFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/folders`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FolderCreateStorageAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling deleteFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFolder."
        );
      }
      const localVarPath = `/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete folder from recycle bin
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderFromRecycleBin(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling deleteFolderFromRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFolderFromRecycleBin."
        );
      }
      const localVarPath = `/recycleBin/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFolder."
        );
      }
      const localVarPath = `/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/list`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      const localVarPath = `/recycleBin`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFoldersInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/folders`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Restore folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling restoreFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling restoreFolder."
        );
      }
      const localVarPath = `/recycleBin/folders/{folderId}/restore`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/search`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Update folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FolderUpdateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      folderId: string,
      Authorization: string,
      body?: FolderUpdateStorageAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling updateFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateFolder."
        );
      }
      const localVarPath = `/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FolderUpdateStorageAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Create folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FolderCreateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      folderId: string,
      Authorization: string,
      body?: FolderCreateStorageAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<FolderResponseStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).createFolder(folderId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).deleteFolder(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete folder from recycle bin
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderFromRecycleBin(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).deleteFolderFromRecycleBin(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<FolderResponseStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolder(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ItemsStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ItemsStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FoldersStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFoldersInFolder(folderId, Authorization, top, skip, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ItemsWithFolderLinkStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Restore folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).restoreFolder(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ItemsStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Update folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FolderUpdateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      folderId: string,
      Authorization: string,
      body?: FolderUpdateStorageAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<FolderResponseStorageAPI> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).updateFolder(folderId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Create folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FolderCreateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      folderId: string,
      Authorization: string,
      body?: FolderCreateStorageAPI,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).createFolder(
        folderId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).deleteFolder(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete folder from recycle bin
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderFromRecycleBin(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).deleteFolderFromRecycleBin(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).getFolder(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get folders in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).getFoldersInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Restore folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFolder(
      folderId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).restoreFolder(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Update folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {FolderUpdateStorageAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      folderId: string,
      Authorization: string,
      body?: FolderUpdateStorageAPI,
      Accept?: string,
      options?: any
    ) {
      return FoldersApiFp(configuration).updateFolder(
        folderId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export class FoldersApi extends BaseAPI {
  /**
   * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
   * @summary Create folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {FolderCreateStorageAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public createFolder(
    folderId: string,
    Authorization: string,
    body?: FolderCreateStorageAPI,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).createFolder(
      folderId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Delete folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public deleteFolder(
    folderId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).deleteFolder(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Delete folder from recycle bin
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public deleteFolderFromRecycleBin(
    folderId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).deleteFolderFromRecycleBin(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolder(
    folderId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFolder(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFoldersAndFilesInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFoldersAndFilesInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get folders and files in recycle bin
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFoldersAndFilesInRecycleBin(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFoldersAndFilesInRecycleBin(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get folders in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFoldersInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFoldersInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get top level folders and files by project
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getTopLevelFoldersAndFilesByProject(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getTopLevelFoldersAndFilesByProject(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_delete` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Restore folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public restoreFolder(
    folderId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).restoreFolder(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_read` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Search for folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} name Item name
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public searchForFoldersAndFilesInFolder(
    folderId: string,
    name: string,
    Authorization: string,
    skip?: number,
    top?: number,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).searchForFoldersAndFilesInFolder(
      folderId,
      name,
      Authorization,
      skip,
      top,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `storage_write` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
   * @summary Update folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {FolderUpdateStorageAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public updateFolder(
    folderId: string,
    Authorization: string,
    body?: FolderUpdateStorageAPI,
    Accept?: string,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).updateFolder(
      folderId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
