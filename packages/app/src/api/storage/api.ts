/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Storage
 * Storage API allowing quick files managing
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as portableFetch from "portable-fetch";
import * as url from "url";

import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/storage".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface Error
 */
export interface Error {
  /**
   *
   * @type {string}
   * @memberof Error
   */
  message?: string;
  /**
   *
   * @type {string}
   * @memberof Error
   */
  code?: string;
}

/**
 *
 * @export
 * @interface File
 */
export interface File {
  /**
   *
   * @type {string}
   * @memberof File
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  path?: string;
  /**
   *
   * @type {number}
   * @memberof File
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof File
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  createdDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  lastModifiedDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof File
   */
  parentFolderId?: string;
}

/**
 *
 * @export
 * @interface FileCreate
 */
export interface FileCreate {
  /**
   *
   * @type {string}
   * @memberof FileCreate
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof FileCreate
   */
  description?: string;
}

/**
 *
 * @export
 * @interface FileResult
 */
export interface FileResult {
  /**
   *
   * @type {FileTyped}
   * @memberof FileResult
   */
  file?: FileTyped;
}

/**
 *
 * @export
 * @interface FileTyped
 */
export interface FileTyped {
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  path?: string;
  /**
   *
   * @type {number}
   * @memberof FileTyped
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  createdDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  lastModifiedDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof FileTyped
   */
  parentFolderId?: string;
}

/**
 *
 * @export
 * @interface FileUpdate
 */
export interface FileUpdate {
  /**
   *
   * @type {string}
   * @memberof FileUpdate
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof FileUpdate
   */
  description?: string;
}

/**
 *
 * @export
 * @interface FileUpload
 */
export interface FileUpload {
  /**
   *
   * @type {LinksUpload}
   * @memberof FileUpload
   */
  _links?: LinksUpload;
}

/**
 *
 * @export
 * @interface Files
 */
export interface Files {
  /**
   *
   * @type {Array<any>}
   * @memberof Files
   */
  files?: Array<any>;
  /**
   *
   * @type {LinksPaging}
   * @memberof Files
   */
  _links?: LinksPaging;
}

/**
 *
 * @export
 * @interface Folder
 */
export interface Folder {
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  createdDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  lastModifiedDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof Folder
   */
  parentFolderId?: string;
}

/**
 *
 * @export
 * @interface FolderCreate
 */
export interface FolderCreate {
  /**
   *
   * @type {string}
   * @memberof FolderCreate
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof FolderCreate
   */
  description?: string;
}

/**
 *
 * @export
 * @interface FolderResult
 */
export interface FolderResult {
  /**
   *
   * @type {FolderTyped}
   * @memberof FolderResult
   */
  folder?: FolderTyped;
}

/**
 *
 * @export
 * @interface FolderTyped
 */
export interface FolderTyped {
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  createdDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  lastModifiedDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof FolderTyped
   */
  parentFolderId?: string;
}

/**
 *
 * @export
 * @interface FolderUpdate
 */
export interface FolderUpdate {
  /**
   *
   * @type {string}
   * @memberof FolderUpdate
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof FolderUpdate
   */
  description?: string;
}

/**
 *
 * @export
 * @interface Folders
 */
export interface Folders {
  /**
   *
   * @type {Array<Folder>}
   * @memberof Folders
   */
  folders?: Array<Folder>;
  /**
   *
   * @type {LinksPaging}
   * @memberof Folders
   */
  _links?: LinksPaging;
}

/**
 *
 * @export
 * @interface Items
 */
export interface Items {
  /**
   *
   * @type {Array<any>}
   * @memberof Items
   */
  items?: Array<any>;
  /**
   *
   * @type {LinksPaging}
   * @memberof Items
   */
  _links?: LinksPaging;
}

/**
 *
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  href?: string;
}

/**
 *
 * @export
 * @interface LinksPaging
 */
export interface LinksPaging {
  /**
   *
   * @type {Link}
   * @memberof LinksPaging
   */
  self?: Link;
  /**
   *
   * @type {Link}
   * @memberof LinksPaging
   */
  next?: Link;
  /**
   *
   * @type {Link}
   * @memberof LinksPaging
   */
  prev?: Link;
}

/**
 *
 * @export
 * @interface LinksUpload
 */
export interface LinksUpload {
  /**
   *
   * @type {Link}
   * @memberof LinksUpload
   */
  uploadUrl?: Link;
  /**
   *
   * @type {Link}
   * @memberof LinksUpload
   */
  completeUrl?: Link;
}

/**
 *
 * @export
 * @interface MinimalError
 */
export interface MinimalError {
  /**
   *
   * @type {Error}
   * @memberof MinimalError
   */
  self?: Error;
}

/**
 * FilesApi - fetch parameter creator
 * @export
 */
export const FilesApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Complete file creation
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeFileCreation(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling completeFileCreation."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling completeFileCreation."
        );
      }
      const localVarPath = `/files/{fileId}/complete`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response.    - uploadUrl is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - completeUrl should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Create file
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FileCreate} [file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      file_create?: FileCreate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling createFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createFile."
        );
      }
      const localVarPath = `/folders/{folderId}/files`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FileCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(file_create || {})
        : file_create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling deleteFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFile."
        );
      }
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete file from recycle bin
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileFromRecycleBin(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling deleteFileFromRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFileFromRecycleBin."
        );
      }
      const localVarPath = `/recycleBin/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Download file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling downloadFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling downloadFile."
        );
      }
      const localVarPath = `/files/{fileId}/download`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling getFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFile."
        );
      }
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/files`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/list`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      const localVarPath = `/recycleBin`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Restore file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling restoreFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling restoreFile."
        );
      }
      const localVarPath = `/recycleBin/files/{fileId}/restore`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/search`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Update file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FileUpdate} [file_update]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      file_update?: FileUpdate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'fileId' is not null or undefined
      if (fileId === null || fileId === undefined) {
        throw new RequiredError(
          "fileId",
          "Required parameter fileId was null or undefined when calling updateFile."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateFile."
        );
      }
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FileUpdate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(file_update || {})
        : file_update || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Complete file creation
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeFileCreation(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FileResult> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).completeFileCreation(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response.    - uploadUrl is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - completeUrl should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Create file
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FileCreate} [file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      file_create?: FileCreate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FileUpload> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).createFile(folderId, Authorization, Accept, file_create, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).deleteFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete file from recycle bin
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileFromRecycleBin(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).deleteFileFromRecycleBin(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Download file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).downloadFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FileResult> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Files> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFilesInFolder(folderId, Authorization, top, skip, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Restore file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).restoreFile(fileId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Update file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FileUpdate} [file_update]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      file_update?: FileUpdate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FileResult> {
      const localVarFetchArgs = FilesApiFetchParamCreator(
        configuration
      ).updateFile(fileId, Authorization, Accept, file_update, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Complete file creation
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeFileCreation(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).completeFileCreation(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response.    - uploadUrl is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - completeUrl should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Create file
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FileCreate} [file_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      file_create?: FileCreate,
      options?: any
    ) {
      return FilesApiFp(configuration).createFile(
        folderId,
        Authorization,
        Accept,
        file_create,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).deleteFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete file from recycle bin
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileFromRecycleBin(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).deleteFileFromRecycleBin(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Download file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).downloadFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).getFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).getFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Restore file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).restoreFile(
        fileId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FilesApiFp(configuration).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
     * @summary Update file
     * @param {string} fileId File Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FileUpdate} [file_update]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      fileId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      file_update?: FileUpdate,
      options?: any
    ) {
      return FilesApiFp(configuration).updateFile(
        fileId,
        Authorization,
        Accept,
        file_update,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
  /**
   * ---    Complete file creation    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Complete file creation
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public completeFileCreation(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).completeFileCreation(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Create new file    ### Notes    File creation is three steps operation. This request will create file's meta data. Next two requests need to be executed by using links from the response.    - uploadUrl is required for file upload. Upload can be done by sending http request and specifying x-ms-blob-type header to BlockBlob.  - completeUrl should be used to confirm file upload and it is final request for file creation.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
   * @summary Create file
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {FileCreate} [file_create]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public createFile(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    file_create?: FileCreate,
    options?: any
  ) {
    return FilesApiFp(this.configuration).createFile(
      folderId,
      Authorization,
      Accept,
      file_create,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a file    ### Notes    File moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Delete file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public deleteFile(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).deleteFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Delete file from recycle bin
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public deleteFileFromRecycleBin(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).deleteFileFromRecycleBin(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves file    ### Notes    This endpoint returns 302 status code with Location header, which on success contains a link to the file. Redirection is not supported by developer portal and an error could be returned while using the \"Try it\" feature for this API. However, this endpoint will work if a request is sent from a different http client or by using the link specified in the response Location header.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Download file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public downloadFile(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).downloadFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFile(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves files    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get files in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFilesInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFilesInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFoldersAndFilesInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFoldersAndFilesInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get folders and files in recycle bin
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFoldersAndFilesInRecycleBin(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).getFoldersAndFilesInRecycleBin(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get top level folders and files by project
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getTopLevelFoldersAndFilesByProject(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).getTopLevelFoldersAndFilesByProject(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Restore deleted file from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Restore file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public restoreFile(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).restoreFile(
      fileId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Search for folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} name Item name
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public searchForFoldersAndFilesInFolder(
    folderId: string,
    name: string,
    Authorization: string,
    skip?: number,
    top?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FilesApiFp(this.configuration).searchForFoldersAndFilesInFolder(
      folderId,
      name,
      Authorization,
      skip,
      top,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update file    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFileRequest error with 422 status code. This could happen because of these reasons:    - File name contains invalid characters.  - File name's length is larger than 255 characters.  - File could be harmful. For example, executable files are not accepted.    ---
   * @summary Update file
   * @param {string} fileId File Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {FileUpdate} [file_update]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public updateFile(
    fileId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    file_update?: FileUpdate,
    options?: any
  ) {
    return FilesApiFp(this.configuration).updateFile(
      fileId,
      Authorization,
      Accept,
      file_update,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * FoldersApi - fetch parameter creator
 * @export
 */
export const FoldersApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Create folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FolderCreate} [folder_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      folder_create?: FolderCreate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling createFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/folders`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FolderCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(folder_create || {})
        : folder_create || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling deleteFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFolder."
        );
      }
      const localVarPath = `/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete folder from recycle bin
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderFromRecycleBin(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling deleteFolderFromRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteFolderFromRecycleBin."
        );
      }
      const localVarPath = `/recycleBin/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFolder."
        );
      }
      const localVarPath = `/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/list`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersAndFilesInRecycleBin."
        );
      }
      const localVarPath = `/recycleBin`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling getFoldersInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getFoldersInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/folders`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getTopLevelFoldersAndFilesByProject."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Restore folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling restoreFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling restoreFolder."
        );
      }
      const localVarPath = `/recycleBin/folders/{folderId}/restore`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling searchForFoldersAndFilesInFolder."
        );
      }
      const localVarPath = `/folders/{folderId}/search`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Update folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FolderUpdate} [folder_update]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      folder_update?: FolderUpdate,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'folderId' is not null or undefined
      if (folderId === null || folderId === undefined) {
        throw new RequiredError(
          "folderId",
          "Required parameter folderId was null or undefined when calling updateFolder."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateFolder."
        );
      }
      const localVarPath = `/folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === "function"
            ? configuration.accessToken("oauth2Bentley OAuth2 Service", [
                "storage:read storage:modify",
              ])
            : configuration.accessToken;
        localVarHeaderParameter["Authorization"] =
          "Bearer " + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"FolderUpdate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(folder_update || {})
        : folder_update || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Create folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FolderCreate} [folder_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      folder_create?: FolderCreate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FolderResult> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).createFolder(folderId, Authorization, Accept, folder_create, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).deleteFolder(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete folder from recycle bin
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderFromRecycleBin(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).deleteFolderFromRecycleBin(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Folder> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFolder(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Folders> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getFoldersInFolder(folderId, Authorization, top, skip, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Restore folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).restoreFolder(folderId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Items> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Update folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FolderUpdate} [folder_update]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      folder_update?: FolderUpdate,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<FolderResult> {
      const localVarFetchArgs = FoldersApiFetchParamCreator(
        configuration
      ).updateFolder(folderId, Authorization, Accept, folder_update, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Create folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FolderCreate} [folder_create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      folder_create?: FolderCreate,
      options?: any
    ) {
      return FoldersApiFp(configuration).createFolder(
        folderId,
        Authorization,
        Accept,
        folder_create,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).deleteFolder(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Delete folder from recycle bin
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderFromRecycleBin(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).deleteFolderFromRecycleBin(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).getFolder(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).getFoldersAndFilesInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders and files in recycle bin
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersAndFilesInRecycleBin(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).getFoldersAndFilesInRecycleBin(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get folders in folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoldersInFolder(
      folderId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).getFoldersInFolder(
        folderId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Get top level folders and files by project
     * @param {string} projectId Project Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopLevelFoldersAndFilesByProject(
      projectId: string,
      Authorization: string,
      top?: number,
      skip?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).getTopLevelFoldersAndFilesByProject(
        projectId,
        Authorization,
        top,
        skip,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
     * @summary Restore folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).restoreFolder(
        folderId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
     * @summary Search for folders and files in folder
     * @param {string} folderId Folder Id
     * @param {string} name Item name
     * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForFoldersAndFilesInFolder(
      folderId: string,
      name: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      options?: any
    ) {
      return FoldersApiFp(configuration).searchForFoldersAndFilesInFolder(
        folderId,
        name,
        Authorization,
        skip,
        top,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
     * @summary Update folder
     * @param {string} folderId Folder Id
     * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
     * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {FolderUpdate} [folder_update]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolder(
      folderId: string,
      Authorization: string,
      Accept?: "application/vnd.bentley.itwin-platform.v1+json",
      folder_update?: FolderUpdate,
      options?: any
    ) {
      return FoldersApiFp(configuration).updateFolder(
        folderId,
        Authorization,
        Accept,
        folder_update,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export class FoldersApi extends BaseAPI {
  /**
   * ---    Create new folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
   * @summary Create folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {FolderCreate} [folder_create]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public createFolder(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    folder_create?: FolderCreate,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).createFolder(
      folderId,
      Authorization,
      Accept,
      folder_create,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a folder    ### Notes    Folder moved to the recycle bin will be completely removed after 30 days.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Delete folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public deleteFolder(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).deleteFolder(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete a folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Delete folder from recycle bin
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public deleteFolderFromRecycleBin(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).deleteFolderFromRecycleBin(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFolder(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFolder(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFoldersAndFilesInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFoldersAndFilesInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Get deleted files and folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get folders and files in recycle bin
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFoldersAndFilesInRecycleBin(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFoldersAndFilesInRecycleBin(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves folders    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get folders in folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getFoldersInFolder(
    folderId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getFoldersInFolder(
      folderId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves top level files and folders by project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Get top level folders and files by project
   * @param {string} projectId Project Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public getTopLevelFoldersAndFilesByProject(
    projectId: string,
    Authorization: string,
    top?: number,
    skip?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).getTopLevelFoldersAndFilesByProject(
      projectId,
      Authorization,
      top,
      skip,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Restore deleted folder from the recycle bin    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ---
   * @summary Restore folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public restoreFolder(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).restoreFolder(
      folderId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Finds files and folders in folder by name    ### Notes    This query supports wildcard characters in the name parameter    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:read`.    ---
   * @summary Search for folders and files in folder
   * @param {string} folderId Folder Id
   * @param {string} name Item name
   * @param {string} Authorization OAuth access token with scope &#x60;storage:read&#x60;
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public searchForFoldersAndFilesInFolder(
    folderId: string,
    name: string,
    Authorization: string,
    skip?: number,
    top?: number,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    options?: any
  ) {
    return FoldersApiFp(this.configuration).searchForFoldersAndFilesInFolder(
      folderId,
      name,
      Authorization,
      skip,
      top,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update folder    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `storage:modify`.    ### Errors    This request can return InvalidCreateFolderRequest error with 422 status code. This could happen because of these reasons:    - Folder name contains invalid characters.  - Folder name's length is larger than 255 characters.    ---
   * @summary Update folder
   * @param {string} folderId Folder Id
   * @param {string} Authorization OAuth access token with scope &#x60;storage:modify&#x60;
   * @param {'application/vnd.bentley.itwin-platform.v1+json'} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {FolderUpdate} [folder_update]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoldersApi
   */
  public updateFolder(
    folderId: string,
    Authorization: string,
    Accept?: "application/vnd.bentley.itwin-platform.v1+json",
    folder_update?: FolderUpdate,
    options?: any
  ) {
    return FoldersApiFp(this.configuration).updateFolder(
      folderId,
      Authorization,
      Accept,
      folder_update,
      options
    )(this.fetch, this.basePath);
  }
}
