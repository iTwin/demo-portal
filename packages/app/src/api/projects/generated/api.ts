/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *
 * This code is for demonstration purposes and should not be considered production ready.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Projects
 * Interact with your projects.    View, update, create, and delete projects.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import * as isomorphicFetch from "isomorphic-fetch";
import * as url from "url";

import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/projects".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * Hyperlink container.
 * @export
 * @interface LinkProjectsAPI
 */
export interface LinkProjectsAPI {
  /**
   * Hyperlink container.
   * @type {string}
   * @memberof LinkProjectsAPI
   */
  href?: string;
}
/**
 *
 * @export
 * @interface LinksProjectsAPI
 */
export interface LinksProjectsAPI {
  /**
   *
   * @type {LinkProjectsAPI}
   * @memberof LinksProjectsAPI
   */
  next?: LinkProjectsAPI;
}
/**
 * List of permission user has on a given project
 * @export
 * @interface PermissionsProjectsAPI
 */
export interface PermissionsProjectsAPI {
  /**
   *
   * @type {Array<string>}
   * @memberof PermissionsProjectsAPI
   */
  permissions?: Array<string>;
}
/**
 * Properties of the project to be created.
 * @export
 * @interface ProjectCreateProjectsAPI
 */
export interface ProjectCreateProjectsAPI {
  /**
   * A display name for the project. Max Length: 255 characters
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  displayName: string;
  /**
   * A unique number or code for the project. This is the value that uniquely identifies the project within your organization. Max Length: 255 characters
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  projectNumber: string;
  /**
   * The address or text description of the location of the project. Max Length: 255 characters
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  geographicLocation?: string;
  /**
   * The latitude in degrees from -90 to 90
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  latitude?: string;
  /**
   * The latitude in degrees from -180 to 180
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  longitude?: string;
  /**
   * The timezone that is being used on the project. This should be any Id returned from System.TimeZoneInfo.GetSystemTimeZones()
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  timeZone?: string;
  /**
   * A valid ISO-3166 country code. Max Length: 2 characters. The default value is ZZ.
   * @type {string}
   * @memberof ProjectCreateProjectsAPI
   */
  billingCountry?: string;
  /**
   *
   * @type {ProjectStatusProjectsAPI}
   * @memberof ProjectCreateProjectsAPI
   */
  status?: ProjectStatusProjectsAPI;
  /**
   * If false, then only users from the organization that owns the project can be given access to the project. If true, then users from external organizations can be given access to the project. Users can be given access by using the 'Add project team member' API. The default value is false.
   * @type {boolean}
   * @memberof ProjectCreateProjectsAPI
   */
  allowExternalTeamMembers?: boolean;
}
/**
 * Hyperlinks to related data for this project.
 * @export
 * @interface ProjectLinksProjectsAPI
 */
export interface ProjectLinksProjectsAPI {
  /**
   *
   * @type {LinkProjectsAPI}
   * @memberof ProjectLinksProjectsAPI
   */
  storage?: LinkProjectsAPI;
  /**
   *
   * @type {LinkProjectsAPI}
   * @memberof ProjectLinksProjectsAPI
   */
  forms?: LinkProjectsAPI;
  /**
   *
   * @type {LinkProjectsAPI}
   * @memberof ProjectLinksProjectsAPI
   */
  issues?: LinkProjectsAPI;
  /**
   *
   * @type {LinkProjectsAPI}
   * @memberof ProjectLinksProjectsAPI
   */
  imodels?: LinkProjectsAPI;
}
/**
 * Full representation of a project.
 * @export
 * @interface ProjectProjectsAPI
 */
export interface ProjectProjectsAPI {
  /**
   * The Project Id.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  id?: string;
  /**
   * The display name for the project.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  displayName?: string;
  /**
   * The unique number or code for the project. This is the value that uniquely identifies the project within your organization.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  projectNumber?: string;
  /**
   * The date that the project was created.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  registrationDateTime?: string;
  /**
   * The Id of the user the created the project.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  registeredBy?: string;
  /**
   * The address or text description of the location of the project.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  geographicLocation?: string;
  /**
   * The latitude in degrees from -90 to 90.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  latitude?: string;
  /**
   * The latitude in degrees from -180 to 180.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  longitude?: string;
  /**
   * The timezone that is being used on the project.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  timeZone?: string;
  /**
   * The data center where the project data will be stored.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  dataCenterLocation?: string;
  /**
   * The ISO-3166 country code representing the billing country for this project.
   * @type {string}
   * @memberof ProjectProjectsAPI
   */
  billingCountry?: string;
  /**
   *
   * @type {ProjectStatusProjectsAPI}
   * @memberof ProjectProjectsAPI
   */
  status?: ProjectStatusProjectsAPI;
  /**
   * If false, then only users from the organization that owns the project can be given access to the project. If true, then users from external organizations can be given access to the project.
   * @type {boolean}
   * @memberof ProjectProjectsAPI
   */
  allowExternalTeamMembers?: boolean;
  /**
   *
   * @type {ProjectLinksProjectsAPI}
   * @memberof ProjectProjectsAPI
   */
  _links?: ProjectLinksProjectsAPI;
}
/**
 *
 * @export
 * @interface ProjectResponseProjectsAPI
 */
export interface ProjectResponseProjectsAPI {
  /**
   *
   * @type {ProjectProjectsAPI}
   * @memberof ProjectResponseProjectsAPI
   */
  project?: ProjectProjectsAPI;
}
/**
 * One of 'active', 'inactive', 'trial'
 * @export
 * @enum {string}
 */
export enum ProjectStatusProjectsAPI {
  Active = <any>"active",
  Inactive = <any>"inactive",
  Trial = <any>"trial",
}
/**
 * Minimal representation of a project that contains only id, displayName and projectNumber.
 * @export
 * @interface ProjectSummaryProjectsAPI
 */
export interface ProjectSummaryProjectsAPI {
  /**
   * The Project Id.
   * @type {string}
   * @memberof ProjectSummaryProjectsAPI
   */
  id?: string;
  /**
   * The display name for the project.
   * @type {string}
   * @memberof ProjectSummaryProjectsAPI
   */
  displayName?: string;
  /**
   * The unique number or code for the project. This is the value that uniquely identifies the project within your organization.
   * @type {string}
   * @memberof ProjectSummaryProjectsAPI
   */
  projectNumber?: string;
}
/**
 * Properties of the project to be updated.
 * @export
 * @interface ProjectUpdateProjectsAPI
 */
export interface ProjectUpdateProjectsAPI {
  /**
   * A display name for the project. Max Length: 255 characters
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  displayName?: string;
  /**
   * A unique number or code for the project. This is the value that uniquely identifies the project within your organization. Max Length: 255 characters
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  projectNumber?: string;
  /**
   * The address or text description of the location of the project. Max Length: 255 characters
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  geographicLocation?: string;
  /**
   * The latitude in degrees from -90 to 90
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  latitude?: string;
  /**
   * The latitude in degrees from -180 to 180
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  longitude?: string;
  /**
   * The timezone that is being used on the project. This should be any Id returned from System.TimeZoneInfo.GetSystemTimeZones()
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  timeZone?: string;
  /**
   * A valid ISO-3166 country code. Max Length: 2 characters
   * @type {string}
   * @memberof ProjectUpdateProjectsAPI
   */
  billingCountry?: string;
  /**
   *
   * @type {ProjectStatusProjectsAPI}
   * @memberof ProjectUpdateProjectsAPI
   */
  status?: ProjectStatusProjectsAPI;
  /**
   * If false, then only users from the organization that owns the project can be given access to the project. If true, then users from external organizations can be given access to the project. Users can be given access by using the 'Add project team member' API. The default value is false.
   * @type {boolean}
   * @memberof ProjectUpdateProjectsAPI
   */
  allowExternalTeamMembers?: boolean;
}
/**
 * A list of projects in the minimal representation format.
 * @export
 * @interface ProjectsPreferReturnMinimalProjectsAPI
 */
export interface ProjectsPreferReturnMinimalProjectsAPI {
  /**
   * A list of projects in the minimal representation format.
   * @type {Array<ProjectSummaryProjectsAPI>}
   * @memberof ProjectsPreferReturnMinimalProjectsAPI
   */
  projects?: Array<ProjectSummaryProjectsAPI>;
}
/**
 * A list of projects in the full representation format.
 * @export
 * @interface ProjectsPreferReturnRepresentationProjectsAPI
 */
export interface ProjectsPreferReturnRepresentationProjectsAPI {
  /**
   * A list of projects in the full representation format.
   * @type {Array<ProjectProjectsAPI>}
   * @memberof ProjectsPreferReturnRepresentationProjectsAPI
   */
  projects?: Array<ProjectProjectsAPI>;
}
/**
 *
 * @export
 * @interface RoleCreateProjectsAPI
 */
export interface RoleCreateProjectsAPI {
  /**
   *
   * @type {string}
   * @memberof RoleCreateProjectsAPI
   */
  displayName: string;
  /**
   *
   * @type {string}
   * @memberof RoleCreateProjectsAPI
   */
  description?: string;
}
/**
 *
 * @export
 * @interface RoleProjectsAPI
 */
export interface RoleProjectsAPI {
  /**
   * The role id.
   * @type {string}
   * @memberof RoleProjectsAPI
   */
  id?: string;
  /**
   * The display name for the role.
   * @type {string}
   * @memberof RoleProjectsAPI
   */
  displayName?: string;
  /**
   * The description for the role.
   * @type {string}
   * @memberof RoleProjectsAPI
   */
  description?: string;
  /**
   * List of permissions assigned to the role.
   * @type {Array<string>}
   * @memberof RoleProjectsAPI
   */
  permissions?: Array<string>;
}
/**
 *
 * @export
 * @interface RoleResponseProjectsAPI
 */
export interface RoleResponseProjectsAPI {
  /**
   *
   * @type {RoleProjectsAPI}
   * @memberof RoleResponseProjectsAPI
   */
  role?: RoleProjectsAPI;
}
/**
 *
 * @export
 * @interface RoleUpdateProjectsAPI
 */
export interface RoleUpdateProjectsAPI {
  /**
   *
   * @type {string}
   * @memberof RoleUpdateProjectsAPI
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof RoleUpdateProjectsAPI
   */
  description?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof RoleUpdateProjectsAPI
   */
  permissions?: Array<string>;
}
/**
 *
 * @export
 * @interface RolesProjectsAPI
 */
export interface RolesProjectsAPI {
  /**
   * List of roles.
   * @type {Array<RoleProjectsAPI>}
   * @memberof RolesProjectsAPI
   */
  roles?: Array<RoleProjectsAPI>;
  /**
   *
   * @type {LinksProjectsAPI}
   * @memberof RolesProjectsAPI
   */
  _links?: LinksProjectsAPI;
}
/**
 *
 * @export
 * @interface TeamMemberAddByIdsProjectsAPI
 */
export interface TeamMemberAddByIdsProjectsAPI {
  /**
   * ID of user to add.  If used, cannot pass email or roleNames.
   * @type {string}
   * @memberof TeamMemberAddByIdsProjectsAPI
   */
  userId: string;
  /**
   * An array of role IDs that will be assigned to new team member.
   * @type {Array<string>}
   * @memberof TeamMemberAddByIdsProjectsAPI
   */
  roleIds?: Array<string>;
}
/**
 *
 * @export
 * @interface TeamMemberAddByNamesProjectsAPI
 */
export interface TeamMemberAddByNamesProjectsAPI {
  /**
   * Email address of the user to add.  If used, cannot pass userId or roleIds.
   * @type {string}
   * @memberof TeamMemberAddByNamesProjectsAPI
   */
  email: string;
  /**
   * An array of role names that will be assigned to new team member
   * @type {Array<string>}
   * @memberof TeamMemberAddByNamesProjectsAPI
   */
  roleNames?: Array<string>;
}
/**
 *
 * @export
 * @interface TeamMemberProjectsAPI
 */
export interface TeamMemberProjectsAPI {
  /**
   * The user Id in Identity Management System.
   * @type {string}
   * @memberof TeamMemberProjectsAPI
   */
  userId?: string;
  /**
   * User email.
   * @type {string}
   * @memberof TeamMemberProjectsAPI
   */
  email?: string;
  /**
   * User given name.
   * @type {string}
   * @memberof TeamMemberProjectsAPI
   */
  givenName?: string;
  /**
   * User surname.
   * @type {string}
   * @memberof TeamMemberProjectsAPI
   */
  surname?: string;
  /**
   * Organization user is member of in Identity Management System.
   * @type {string}
   * @memberof TeamMemberProjectsAPI
   */
  organization?: string;
  /**
   * List of role names.
   * @type {Array<string>}
   * @memberof TeamMemberProjectsAPI
   */
  roles?: Array<string>;
}
/**
 *
 * @export
 * @interface TeamMemberRolesUpdateProjectsAPI
 */
export interface TeamMemberRolesUpdateProjectsAPI {
  /**
   * List of role ids.
   * @type {Array<string>}
   * @memberof TeamMemberRolesUpdateProjectsAPI
   */
  roleIds: Array<string>;
}
/**
 *
 * @export
 * @interface TeamMembersProjectsAPI
 */
export interface TeamMembersProjectsAPI {
  /**
   * List of team members.
   * @type {Array<TeamMemberProjectsAPI>}
   * @memberof TeamMembersProjectsAPI
   */
  members?: Array<TeamMemberProjectsAPI>;
  /**
   *
   * @type {LinksProjectsAPI}
   * @memberof TeamMembersProjectsAPI
   */
  _links?: LinksProjectsAPI;
}
/**
 * ProjectFavoritesApi - fetch parameter creator
 * @export
 */
export const ProjectFavoritesApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Add a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Add project to my favorites
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectToMyFavorites(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling addProjectToMyFavorites."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling addProjectToMyFavorites."
        );
      }
      const localVarPath = `/favorites/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a list of favorite projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my favorite projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyFavoriteProjects(
      Authorization: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getMyFavoriteProjects."
        );
      }
      const localVarPath = `/favorites`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Prefer !== undefined && Prefer !== null) {
        localVarHeaderParameter["Prefer"] = String(Prefer);
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Remove a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Remove project from my favorites
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectFromMyFavorites(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling removeProjectFromMyFavorites."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling removeProjectFromMyFavorites."
        );
      }
      const localVarPath = `/favorites/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectFavoritesApi - functional programming interface
 * @export
 */
export const ProjectFavoritesApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Add a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Add project to my favorites
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectToMyFavorites(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectFavoritesApiFetchParamCreator(
        configuration
      ).addProjectToMyFavorites(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a list of favorite projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my favorite projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyFavoriteProjects(
      Authorization: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ProjectsPreferReturnMinimalProjectsAPI> {
      const localVarFetchArgs = ProjectFavoritesApiFetchParamCreator(
        configuration
      ).getMyFavoriteProjects(
        Authorization,
        top,
        skip,
        Prefer,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Remove a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Remove project from my favorites
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectFromMyFavorites(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectFavoritesApiFetchParamCreator(
        configuration
      ).removeProjectFromMyFavorites(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ProjectFavoritesApi - factory interface
 * @export
 */
export const ProjectFavoritesApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Add a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Add project to my favorites
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectToMyFavorites(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectFavoritesApiFp(configuration).addProjectToMyFavorites(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a list of favorite projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my favorite projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyFavoriteProjects(
      Authorization: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectFavoritesApiFp(configuration).getMyFavoriteProjects(
        Authorization,
        top,
        skip,
        Prefer,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Remove a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Remove project from my favorites
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectFromMyFavorites(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectFavoritesApiFp(configuration).removeProjectFromMyFavorites(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ProjectFavoritesApi - object-oriented interface
 * @export
 * @class ProjectFavoritesApi
 * @extends {BaseAPI}
 */
export class ProjectFavoritesApi extends BaseAPI {
  /**
   * ---    Add a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Add project to my favorites
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectFavoritesApi
   */
  public addProjectToMyFavorites(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectFavoritesApiFp(this.configuration).addProjectToMyFavorites(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a list of favorite projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
   * @summary Get my favorite projects
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectFavoritesApi
   */
  public getMyFavoriteProjects(
    Authorization: string,
    top?: number,
    skip?: number,
    Prefer?: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectFavoritesApiFp(this.configuration).getMyFavoriteProjects(
      Authorization,
      top,
      skip,
      Prefer,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Remove a project to my favorites list.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Remove project from my favorites
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectFavoritesApi
   */
  public removeProjectFromMyFavorites(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectFavoritesApiFp(
      this.configuration
    ).removeProjectFromMyFavorites(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ProjectRecentsApi - fetch parameter creator
 * @export
 */
export const ProjectRecentsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Adds a project to my recently used projects list. No more than 25 projects are stored in the recently used list. Older ones are removed to make room for new ones.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Add project to my recents
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectToMyRecents(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling addProjectToMyRecents."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling addProjectToMyRecents."
        );
      }
      const localVarPath = `/recents/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a list of recently used projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my recently used projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyRecentlyUsedProjects(
      Authorization: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getMyRecentlyUsedProjects."
        );
      }
      const localVarPath = `/recents`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Prefer !== undefined && Prefer !== null) {
        localVarHeaderParameter["Prefer"] = String(Prefer);
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectRecentsApi - functional programming interface
 * @export
 */
export const ProjectRecentsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Adds a project to my recently used projects list. No more than 25 projects are stored in the recently used list. Older ones are removed to make room for new ones.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Add project to my recents
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectToMyRecents(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectRecentsApiFetchParamCreator(
        configuration
      ).addProjectToMyRecents(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a list of recently used projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my recently used projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyRecentlyUsedProjects(
      Authorization: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ProjectsPreferReturnMinimalProjectsAPI> {
      const localVarFetchArgs = ProjectRecentsApiFetchParamCreator(
        configuration
      ).getMyRecentlyUsedProjects(
        Authorization,
        top,
        skip,
        Prefer,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ProjectRecentsApi - factory interface
 * @export
 */
export const ProjectRecentsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Adds a project to my recently used projects list. No more than 25 projects are stored in the recently used list. Older ones are removed to make room for new ones.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Add project to my recents
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectToMyRecents(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectRecentsApiFp(configuration).addProjectToMyRecents(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a list of recently used projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my recently used projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyRecentlyUsedProjects(
      Authorization: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectRecentsApiFp(configuration).getMyRecentlyUsedProjects(
        Authorization,
        top,
        skip,
        Prefer,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ProjectRecentsApi - object-oriented interface
 * @export
 * @class ProjectRecentsApi
 * @extends {BaseAPI}
 */
export class ProjectRecentsApi extends BaseAPI {
  /**
   * ---    Adds a project to my recently used projects list. No more than 25 projects are stored in the recently used list. Older ones are removed to make room for new ones.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Add project to my recents
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectRecentsApi
   */
  public addProjectToMyRecents(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectRecentsApiFp(this.configuration).addProjectToMyRecents(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a list of recently used projects for the logged in user. The user is determined by the authentication token.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
   * @summary Get my recently used projects
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectRecentsApi
   */
  public getMyRecentlyUsedProjects(
    Authorization: string,
    top?: number,
    skip?: number,
    Prefer?: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectRecentsApiFp(this.configuration).getMyRecentlyUsedProjects(
      Authorization,
      top,
      skip,
      Prefer,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ProjectRolesApi - fetch parameter creator
 * @export
 */
export const ProjectRolesApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Create new project role.    ### Notes    - The POST body MUST include the displayName property.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Create project role
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {RoleCreateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectRole(
      id: string,
      Authorization: string,
      body?: RoleCreateProjectsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling createProjectRole."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createProjectRole."
        );
      }
      const localVarPath = `/{id}/roles`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"RoleCreateProjectsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete the specified project role.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete project role
     * @param {string} id Project ID
     * @param {string} roleId Project role ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectRole(
      id: string,
      roleId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling deleteProjectRole."
        );
      }
      // verify required parameter 'roleId' is not null or undefined
      if (roleId === null || roleId === undefined) {
        throw new RequiredError(
          "roleId",
          "Required parameter roleId was null or undefined when calling deleteProjectRole."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteProjectRole."
        );
      }
      const localVarPath = `/{id}/roles/{roleId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a list of available user roles that are defined for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project roles
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectRoles(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getProjectRoles."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getProjectRoles."
        );
      }
      const localVarPath = `/{id}/roles`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update the specified project role.    ### Notes    To assign permissions to a role PATCH body MUST include an array of permissions. If a user is not Organization Administrator permissions that could be assigned to the role  are limited to permissions the user has on a project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update project role
     * @param {string} id The project ID
     * @param {string} roleId Project role ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {RoleUpdateProjectsAPI} [body] A project role instance with the fields that should be updated.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectRole(
      id: string,
      roleId: string,
      Authorization: string,
      body?: RoleUpdateProjectsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling updateProjectRole."
        );
      }
      // verify required parameter 'roleId' is not null or undefined
      if (roleId === null || roleId === undefined) {
        throw new RequiredError(
          "roleId",
          "Required parameter roleId was null or undefined when calling updateProjectRole."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateProjectRole."
        );
      }
      const localVarPath = `/{id}/roles/{roleId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"RoleUpdateProjectsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectRolesApi - functional programming interface
 * @export
 */
export const ProjectRolesApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Create new project role.    ### Notes    - The POST body MUST include the displayName property.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Create project role
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {RoleCreateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectRole(
      id: string,
      Authorization: string,
      body?: RoleCreateProjectsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<RoleResponseProjectsAPI> {
      const localVarFetchArgs = ProjectRolesApiFetchParamCreator(
        configuration
      ).createProjectRole(id, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete the specified project role.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete project role
     * @param {string} id Project ID
     * @param {string} roleId Project role ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectRole(
      id: string,
      roleId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectRolesApiFetchParamCreator(
        configuration
      ).deleteProjectRole(id, roleId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a list of available user roles that are defined for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project roles
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectRoles(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<RolesProjectsAPI> {
      const localVarFetchArgs = ProjectRolesApiFetchParamCreator(
        configuration
      ).getProjectRoles(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update the specified project role.    ### Notes    To assign permissions to a role PATCH body MUST include an array of permissions. If a user is not Organization Administrator permissions that could be assigned to the role  are limited to permissions the user has on a project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update project role
     * @param {string} id The project ID
     * @param {string} roleId Project role ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {RoleUpdateProjectsAPI} [body] A project role instance with the fields that should be updated.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectRole(
      id: string,
      roleId: string,
      Authorization: string,
      body?: RoleUpdateProjectsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<RoleResponseProjectsAPI> {
      const localVarFetchArgs = ProjectRolesApiFetchParamCreator(
        configuration
      ).updateProjectRole(id, roleId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ProjectRolesApi - factory interface
 * @export
 */
export const ProjectRolesApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Create new project role.    ### Notes    - The POST body MUST include the displayName property.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Create project role
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {RoleCreateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectRole(
      id: string,
      Authorization: string,
      body?: RoleCreateProjectsAPI,
      Accept?: string,
      options?: any
    ) {
      return ProjectRolesApiFp(configuration).createProjectRole(
        id,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete the specified project role.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Delete project role
     * @param {string} id Project ID
     * @param {string} roleId Project role ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectRole(
      id: string,
      roleId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectRolesApiFp(configuration).deleteProjectRole(
        id,
        roleId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a list of available user roles that are defined for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project roles
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectRoles(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectRolesApiFp(configuration).getProjectRoles(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update the specified project role.    ### Notes    To assign permissions to a role PATCH body MUST include an array of permissions. If a user is not Organization Administrator permissions that could be assigned to the role  are limited to permissions the user has on a project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update project role
     * @param {string} id The project ID
     * @param {string} roleId Project role ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {RoleUpdateProjectsAPI} [body] A project role instance with the fields that should be updated.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectRole(
      id: string,
      roleId: string,
      Authorization: string,
      body?: RoleUpdateProjectsAPI,
      Accept?: string,
      options?: any
    ) {
      return ProjectRolesApiFp(configuration).updateProjectRole(
        id,
        roleId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ProjectRolesApi - object-oriented interface
 * @export
 * @class ProjectRolesApi
 * @extends {BaseAPI}
 */
export class ProjectRolesApi extends BaseAPI {
  /**
   * ---    Create new project role.    ### Notes    - The POST body MUST include the displayName property.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Create project role
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {RoleCreateProjectsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectRolesApi
   */
  public createProjectRole(
    id: string,
    Authorization: string,
    body?: RoleCreateProjectsAPI,
    Accept?: string,
    options?: any
  ) {
    return ProjectRolesApiFp(this.configuration).createProjectRole(
      id,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete the specified project role.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Delete project role
   * @param {string} id Project ID
   * @param {string} roleId Project role ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectRolesApi
   */
  public deleteProjectRole(
    id: string,
    roleId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectRolesApiFp(this.configuration).deleteProjectRole(
      id,
      roleId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a list of available user roles that are defined for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get project roles
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectRolesApi
   */
  public getProjectRoles(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectRolesApiFp(this.configuration).getProjectRoles(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update the specified project role.    ### Notes    To assign permissions to a role PATCH body MUST include an array of permissions. If a user is not Organization Administrator permissions that could be assigned to the role  are limited to permissions the user has on a project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_manage_roles` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Update project role
   * @param {string} id The project ID
   * @param {string} roleId Project role ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {RoleUpdateProjectsAPI} [body] A project role instance with the fields that should be updated.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectRolesApi
   */
  public updateProjectRole(
    id: string,
    roleId: string,
    Authorization: string,
    body?: RoleUpdateProjectsAPI,
    Accept?: string,
    options?: any
  ) {
    return ProjectRolesApiFp(this.configuration).updateProjectRole(
      id,
      roleId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ProjectUsersApi - fetch parameter creator
 * @export
 */
export const ProjectUsersApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Add new project team member    ### Notes    The POST body MUST include either a *userId* property or an *e-mail* property.    When adding members by ids, the POST body MAY include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    When adding members by names, the POST body MAY include the roleNames property, which MUST be defined as an array of role names that will be assigned to new team member.    When adding members *Team Member* role will be assigned to all members. *Team Member* role grants member write access to Storage and Forms APIs. *Team Member* can be removed from any member if access to Storage and Forms APIs is not desired.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Add project team member
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {TeamMemberAddByIdsProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectTeamMember(
      id: string,
      Authorization: string,
      body?: TeamMemberAddByIdsProjectsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling addProjectTeamMember."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling addProjectTeamMember."
        );
      }
      const localVarPath = `/{id}/members`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json;ids";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"TeamMemberAddByNamesProjectsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves detailed information of specific team member for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project team member details
     * @param {string} id
     * @param {string} memberId
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTeamMemberDetails(
      id: string,
      memberId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getProjectTeamMemberDetails."
        );
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new RequiredError(
          "memberId",
          "Required parameter memberId was null or undefined when calling getProjectTeamMemberDetails."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getProjectTeamMemberDetails."
        );
      }
      const localVarPath = `/{id}/members/{memberId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a list of team members and their roles assigned to a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project team members
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result. Value must be less or equal to 100.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTeamMembers(
      id: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getProjectTeamMembers."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getProjectTeamMembers."
        );
      }
      const localVarPath = `/{id}/members`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a list of permissions the user has for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get member permissions
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getUserPermissions."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getUserPermissions."
        );
      }
      const localVarPath = `/{id}/permissions`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Remove the specified project team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_remove_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Remove project team member
     * @param {string} id Project ID
     * @param {string} memberId Project team member ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectTeamMember(
      id: string,
      memberId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling removeProjectTeamMember."
        );
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new RequiredError(
          "memberId",
          "Required parameter memberId was null or undefined when calling removeProjectTeamMember."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling removeProjectTeamMember."
        );
      }
      const localVarPath = `/{id}/members/{memberId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update project team member roles    ### Notes    The PATCH body MUST include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update project team member roles
     * @param {string} id The project ID
     * @param {string} memberId Project team member ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {TeamMemberRolesUpdateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectTeamMemberRoles(
      id: string,
      memberId: string,
      Authorization: string,
      body?: TeamMemberRolesUpdateProjectsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling updateProjectTeamMemberRoles."
        );
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new RequiredError(
          "memberId",
          "Required parameter memberId was null or undefined when calling updateProjectTeamMemberRoles."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateProjectTeamMemberRoles."
        );
      }
      const localVarPath = `/{id}/members/{memberId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"TeamMemberRolesUpdateProjectsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectUsersApi - functional programming interface
 * @export
 */
export const ProjectUsersApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Add new project team member    ### Notes    The POST body MUST include either a *userId* property or an *e-mail* property.    When adding members by ids, the POST body MAY include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    When adding members by names, the POST body MAY include the roleNames property, which MUST be defined as an array of role names that will be assigned to new team member.    When adding members *Team Member* role will be assigned to all members. *Team Member* role grants member write access to Storage and Forms APIs. *Team Member* can be removed from any member if access to Storage and Forms APIs is not desired.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Add project team member
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {TeamMemberAddByIdsProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectTeamMember(
      id: string,
      Authorization: string,
      body?: TeamMemberAddByIdsProjectsAPI,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectUsersApiFetchParamCreator(
        configuration
      ).addProjectTeamMember(id, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves detailed information of specific team member for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project team member details
     * @param {string} id
     * @param {string} memberId
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTeamMemberDetails(
      id: string,
      memberId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<TeamMemberProjectsAPI> {
      const localVarFetchArgs = ProjectUsersApiFetchParamCreator(
        configuration
      ).getProjectTeamMemberDetails(
        id,
        memberId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a list of team members and their roles assigned to a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project team members
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result. Value must be less or equal to 100.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTeamMembers(
      id: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<TeamMembersProjectsAPI> {
      const localVarFetchArgs = ProjectUsersApiFetchParamCreator(
        configuration
      ).getProjectTeamMembers(id, Authorization, skip, top, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a list of permissions the user has for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get member permissions
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<PermissionsProjectsAPI> {
      const localVarFetchArgs = ProjectUsersApiFetchParamCreator(
        configuration
      ).getUserPermissions(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Remove the specified project team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_remove_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Remove project team member
     * @param {string} id Project ID
     * @param {string} memberId Project team member ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectTeamMember(
      id: string,
      memberId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectUsersApiFetchParamCreator(
        configuration
      ).removeProjectTeamMember(id, memberId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update project team member roles    ### Notes    The PATCH body MUST include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update project team member roles
     * @param {string} id The project ID
     * @param {string} memberId Project team member ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {TeamMemberRolesUpdateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectTeamMemberRoles(
      id: string,
      memberId: string,
      Authorization: string,
      body?: TeamMemberRolesUpdateProjectsAPI,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<TeamMemberProjectsAPI> {
      const localVarFetchArgs = ProjectUsersApiFetchParamCreator(
        configuration
      ).updateProjectTeamMemberRoles(
        id,
        memberId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ProjectUsersApi - factory interface
 * @export
 */
export const ProjectUsersApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Add new project team member    ### Notes    The POST body MUST include either a *userId* property or an *e-mail* property.    When adding members by ids, the POST body MAY include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    When adding members by names, the POST body MAY include the roleNames property, which MUST be defined as an array of role names that will be assigned to new team member.    When adding members *Team Member* role will be assigned to all members. *Team Member* role grants member write access to Storage and Forms APIs. *Team Member* can be removed from any member if access to Storage and Forms APIs is not desired.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Add project team member
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {TeamMemberAddByIdsProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectTeamMember(
      id: string,
      Authorization: string,
      body?: TeamMemberAddByIdsProjectsAPI,
      Accept?: string,
      options?: any
    ) {
      return ProjectUsersApiFp(configuration).addProjectTeamMember(
        id,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves detailed information of specific team member for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project team member details
     * @param {string} id
     * @param {string} memberId
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTeamMemberDetails(
      id: string,
      memberId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectUsersApiFp(configuration).getProjectTeamMemberDetails(
        id,
        memberId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a list of team members and their roles assigned to a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project team members
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result. Value must be less or equal to 100.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTeamMembers(
      id: string,
      Authorization: string,
      skip?: number,
      top?: number,
      Accept?: string,
      options?: any
    ) {
      return ProjectUsersApiFp(configuration).getProjectTeamMembers(
        id,
        Authorization,
        skip,
        top,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a list of permissions the user has for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
     * @summary Get member permissions
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectUsersApiFp(configuration).getUserPermissions(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Remove the specified project team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_remove_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Remove project team member
     * @param {string} id Project ID
     * @param {string} memberId Project team member ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectTeamMember(
      id: string,
      memberId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectUsersApiFp(configuration).removeProjectTeamMember(
        id,
        memberId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update project team member roles    ### Notes    The PATCH body MUST include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Update project team member roles
     * @param {string} id The project ID
     * @param {string} memberId Project team member ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {TeamMemberRolesUpdateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectTeamMemberRoles(
      id: string,
      memberId: string,
      Authorization: string,
      body?: TeamMemberRolesUpdateProjectsAPI,
      Accept?: string,
      options?: any
    ) {
      return ProjectUsersApiFp(configuration).updateProjectTeamMemberRoles(
        id,
        memberId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ProjectUsersApi - object-oriented interface
 * @export
 * @class ProjectUsersApi
 * @extends {BaseAPI}
 */
export class ProjectUsersApi extends BaseAPI {
  /**
   * ---    Add new project team member    ### Notes    The POST body MUST include either a *userId* property or an *e-mail* property.    When adding members by ids, the POST body MAY include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    When adding members by names, the POST body MAY include the roleNames property, which MUST be defined as an array of role names that will be assigned to new team member.    When adding members *Team Member* role will be assigned to all members. *Team Member* role grants member write access to Storage and Forms APIs. *Team Member* can be removed from any member if access to Storage and Forms APIs is not desired.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Add project team member
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {TeamMemberAddByIdsProjectsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectUsersApi
   */
  public addProjectTeamMember(
    id: string,
    Authorization: string,
    body?: TeamMemberAddByIdsProjectsAPI,
    Accept?: string,
    options?: any
  ) {
    return ProjectUsersApiFp(this.configuration).addProjectTeamMember(
      id,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves detailed information of specific team member for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get project team member details
   * @param {string} id
   * @param {string} memberId
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectUsersApi
   */
  public getProjectTeamMemberDetails(
    id: string,
    memberId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectUsersApiFp(this.configuration).getProjectTeamMemberDetails(
      id,
      memberId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a list of team members and their roles assigned to a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get project team members
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result. Value must be less or equal to 100.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectUsersApi
   */
  public getProjectTeamMembers(
    id: string,
    Authorization: string,
    skip?: number,
    top?: number,
    Accept?: string,
    options?: any
  ) {
    return ProjectUsersApiFp(this.configuration).getProjectTeamMembers(
      id,
      Authorization,
      skip,
      top,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a list of permissions the user has for a specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ---
   * @summary Get member permissions
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectUsersApi
   */
  public getUserPermissions(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectUsersApiFp(this.configuration).getUserPermissions(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Remove the specified project team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_remove_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Remove project team member
   * @param {string} id Project ID
   * @param {string} memberId Project team member ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectUsersApi
   */
  public removeProjectTeamMember(
    id: string,
    memberId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectUsersApiFp(this.configuration).removeProjectTeamMember(
      id,
      memberId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update project team member roles    ### Notes    The PATCH body MUST include the roleIds property, which MUST be defined as an array of role IDs that will be assigned to new team member.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given Project or have `administration_invite_member` permission assigned at the Project level.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Update project team member roles
   * @param {string} id The project ID
   * @param {string} memberId Project team member ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {TeamMemberRolesUpdateProjectsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectUsersApi
   */
  public updateProjectTeamMemberRoles(
    id: string,
    memberId: string,
    Authorization: string,
    body?: TeamMemberRolesUpdateProjectsAPI,
    Accept?: string,
    options?: any
  ) {
    return ProjectUsersApiFp(this.configuration).updateProjectTeamMemberRoles(
      id,
      memberId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ProjectsApi - fetch parameter creator
 * @export
 */
export const ProjectsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Create a new project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to create a project.  The new project will be owned by the Organization.     Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to create projects and those projects will belong to Stark Industries. John and any other Organization Administrator for Stark Industries will be able to update or delete the project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    Any user that is not affiliated with an Organization can create a project. The new project will be owned by the user account.     Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to create projects and those projects will belong to Jane. Only Jane will be able to update or delete the project.    ---
     * @summary Create project
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {ProjectCreateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(
      Authorization: string,
      body?: ProjectCreateProjectsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createProject."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ProjectCreateProjectsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Delete the specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to delete a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to delete any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can delete projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to delete any project that belongs to Jane. Jane owns any project that she created.    ---
     * @summary Delete project
     * @param {string} id Project id
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling deleteProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteProject."
        );
      }
      const localVarPath = `/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets the details of the specified project.      ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns the specified project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(
      id: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getProject."
        );
      }
      const localVarPath = `/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Retrieves a list of projects that can be accessed by the loggged in user. The user is determined by the authentication token. See the Authorization section for information on how access rights are determined.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [projectNumber] Find all projects with the exact projectNumber specified. Cannot be used at the same time as the $search parameter.
     * @param {string} [displayName] Find all projects with the exact displayName specified. Cannot be used at the same time as the $search parameter.
     * @param {string} [search] Find all projects that have the search string anywhere in the projectNumber or displayName. Cannot be used at the same time as the projectNumber or displayName parameters.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myProjects(
      Authorization: string,
      projectNumber?: string,
      displayName?: string,
      search?: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling myProjects."
        );
      }
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (projectNumber !== undefined) {
        localVarQueryParameter["projectNumber"] = projectNumber;
      }

      if (displayName !== undefined) {
        localVarQueryParameter["displayName"] = displayName;
      }

      if (search !== undefined) {
        localVarQueryParameter["$search"] = search;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter["$skip"] = skip;
      }

      if (Prefer !== undefined && Prefer !== null) {
        localVarHeaderParameter["Prefer"] = String(Prefer);
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Update the specified project.    For updates, all properties are optional. The request payload only needs to contain the properties that you would like to update.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to update a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to update any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can update projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to update any project that belong to Jane. Jane owns any project that she created.    ---
     * @summary Update project
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {ProjectUpdateProjectsAPI} [body] A project instance with the fields that should be updated.  ReadOnly fields should not be included.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(
      id: string,
      Authorization: string,
      body?: ProjectUpdateProjectsAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling updateProject."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateProject."
        );
      }
      const localVarPath = `/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("apikey")
            : configuration.apiKey;
        localVarQueryParameter["apikey"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ProjectUpdateProjectsAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Create a new project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to create a project.  The new project will be owned by the Organization.     Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to create projects and those projects will belong to Stark Industries. John and any other Organization Administrator for Stark Industries will be able to update or delete the project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    Any user that is not affiliated with an Organization can create a project. The new project will be owned by the user account.     Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to create projects and those projects will belong to Jane. Only Jane will be able to update or delete the project.    ---
     * @summary Create project
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {ProjectCreateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(
      Authorization: string,
      body?: ProjectCreateProjectsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ProjectResponseProjectsAPI> {
      const localVarFetchArgs = ProjectsApiFetchParamCreator(
        configuration
      ).createProject(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Delete the specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to delete a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to delete any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can delete projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to delete any project that belongs to Jane. Jane owns any project that she created.    ---
     * @summary Delete project
     * @param {string} id Project id
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProjectsApiFetchParamCreator(
        configuration
      ).deleteProject(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets the details of the specified project.      ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns the specified project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ProjectResponseProjectsAPI> {
      const localVarFetchArgs = ProjectsApiFetchParamCreator(
        configuration
      ).getProject(id, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Retrieves a list of projects that can be accessed by the loggged in user. The user is determined by the authentication token. See the Authorization section for information on how access rights are determined.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [projectNumber] Find all projects with the exact projectNumber specified. Cannot be used at the same time as the $search parameter.
     * @param {string} [displayName] Find all projects with the exact displayName specified. Cannot be used at the same time as the $search parameter.
     * @param {string} [search] Find all projects that have the search string anywhere in the projectNumber or displayName. Cannot be used at the same time as the projectNumber or displayName parameters.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myProjects(
      Authorization: string,
      projectNumber?: string,
      displayName?: string,
      search?: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ProjectsPreferReturnMinimalProjectsAPI> {
      const localVarFetchArgs = ProjectsApiFetchParamCreator(
        configuration
      ).myProjects(
        Authorization,
        projectNumber,
        displayName,
        search,
        top,
        skip,
        Prefer,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Update the specified project.    For updates, all properties are optional. The request payload only needs to contain the properties that you would like to update.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to update a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to update any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can update projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to update any project that belong to Jane. Jane owns any project that she created.    ---
     * @summary Update project
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {ProjectUpdateProjectsAPI} [body] A project instance with the fields that should be updated.  ReadOnly fields should not be included.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(
      id: string,
      Authorization: string,
      body?: ProjectUpdateProjectsAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ProjectResponseProjectsAPI> {
      const localVarFetchArgs = ProjectsApiFetchParamCreator(
        configuration
      ).updateProject(id, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Create a new project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to create a project.  The new project will be owned by the Organization.     Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to create projects and those projects will belong to Stark Industries. John and any other Organization Administrator for Stark Industries will be able to update or delete the project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    Any user that is not affiliated with an Organization can create a project. The new project will be owned by the user account.     Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to create projects and those projects will belong to Jane. Only Jane will be able to update or delete the project.    ---
     * @summary Create project
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {ProjectCreateProjectsAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(
      Authorization: string,
      body?: ProjectCreateProjectsAPI,
      Accept?: string,
      options?: any
    ) {
      return ProjectsApiFp(configuration).createProject(
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Delete the specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to delete a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to delete any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can delete projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to delete any project that belongs to Jane. Jane owns any project that she created.    ---
     * @summary Delete project
     * @param {string} id Project id
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectsApiFp(configuration).deleteProject(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets the details of the specified project.      ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns the specified project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get project
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(
      id: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectsApiFp(configuration).getProject(
        id,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Retrieves a list of projects that can be accessed by the loggged in user. The user is determined by the authentication token. See the Authorization section for information on how access rights are determined.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
     * @summary Get my projects
     * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
     * @param {string} [projectNumber] Find all projects with the exact projectNumber specified. Cannot be used at the same time as the $search parameter.
     * @param {string} [displayName] Find all projects with the exact displayName specified. Cannot be used at the same time as the $search parameter.
     * @param {string} [search] Find all projects that have the search string anywhere in the projectNumber or displayName. Cannot be used at the same time as the projectNumber or displayName parameters.
     * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
     * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
     * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myProjects(
      Authorization: string,
      projectNumber?: string,
      displayName?: string,
      search?: string,
      top?: number,
      skip?: number,
      Prefer?: string,
      Accept?: string,
      options?: any
    ) {
      return ProjectsApiFp(configuration).myProjects(
        Authorization,
        projectNumber,
        displayName,
        search,
        top,
        skip,
        Prefer,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Update the specified project.    For updates, all properties are optional. The request payload only needs to contain the properties that you would like to update.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to update a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to update any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can update projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to update any project that belong to Jane. Jane owns any project that she created.    ---
     * @summary Update project
     * @param {string} id The project ID
     * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
     * @param {ProjectUpdateProjectsAPI} [body] A project instance with the fields that should be updated.  ReadOnly fields should not be included.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(
      id: string,
      Authorization: string,
      body?: ProjectUpdateProjectsAPI,
      Accept?: string,
      options?: any
    ) {
      return ProjectsApiFp(configuration).updateProject(
        id,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
  /**
   * ---    Create a new project    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to create a project.  The new project will be owned by the Organization.     Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to create projects and those projects will belong to Stark Industries. John and any other Organization Administrator for Stark Industries will be able to update or delete the project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    Any user that is not affiliated with an Organization can create a project. The new project will be owned by the user account.     Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to create projects and those projects will belong to Jane. Only Jane will be able to update or delete the project.    ---
   * @summary Create project
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {ProjectCreateProjectsAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public createProject(
    Authorization: string,
    body?: ProjectCreateProjectsAPI,
    Accept?: string,
    options?: any
  ) {
    return ProjectsApiFp(this.configuration).createProject(
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Delete the specified project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to delete a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to delete any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can delete projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to delete any project that belongs to Jane. Jane owns any project that she created.    ---
   * @summary Delete project
   * @param {string} id Project id
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public deleteProject(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectsApiFp(this.configuration).deleteProject(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets the details of the specified project.      ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns the specified project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get project
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public getProject(
    id: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectsApiFp(this.configuration).getProject(
      id,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Retrieves a list of projects that can be accessed by the loggged in user. The user is determined by the authentication token. See the Authorization section for information on how access rights are determined.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must be an Organization Administrator for the Organization that owns a given project or be a project team member.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Response    By default, each project in the returned list of projects will have only the project id, display name and project number.    A full representation of each project can be returned by specifying the *prefer* header that includes a value of *return=representation*.    ---
   * @summary Get my projects
   * @param {string} Authorization OAuth access token with scope &#x60;projects:read&#x60;
   * @param {string} [projectNumber] Find all projects with the exact projectNumber specified. Cannot be used at the same time as the $search parameter.
   * @param {string} [displayName] Find all projects with the exact displayName specified. Cannot be used at the same time as the $search parameter.
   * @param {string} [search] Find all projects that have the search string anywhere in the projectNumber or displayName. Cannot be used at the same time as the projectNumber or displayName parameters.
   * @param {number} [top] The [$top](https://www.odata.org/getting-started/basic-tutorial/#topskip) system query option requests the number of items in the queried collection to be included in the result.
   * @param {number} [skip] The [$skip](https://www.odata.org/getting-started/basic-tutorial/#topskip) query option requests the number of items in the queried collection that are to be skipped and not included in the result.
   * @param {string} [Prefer] Indicates a level of details in the response. Valid values are &#x27;return&#x3D;representation&#x27; or &#x27;return&#x3D;minimal&#x27;. The default is &#x27;return&#x3D;minimal&#x27;.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public myProjects(
    Authorization: string,
    projectNumber?: string,
    displayName?: string,
    search?: string,
    top?: number,
    skip?: number,
    Prefer?: string,
    Accept?: string,
    options?: any
  ) {
    return ProjectsApiFp(this.configuration).myProjects(
      Authorization,
      projectNumber,
      displayName,
      search,
      top,
      skip,
      Prefer,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Update the specified project.    For updates, all properties are optional. The request payload only needs to contain the properties that you would like to update.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `projects:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization  If a user is affiliated with an Organization, then the user must be an Organization Administrator in order to update a project that is owned by the Organization.    Example: john.doe@starkindustries.com is an Organization Administrator that works for Stark Industries that has an account with Bentley. John will be able to update any project that belongs to Stark Industries.     An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    A user that is not affiliated with an Organization can update projects that are owned by the user account.    Example: jane.doe@gmail.com is an independent contractor that does not have an account with Bentley. Jane will be able to update any project that belong to Jane. Jane owns any project that she created.    ---
   * @summary Update project
   * @param {string} id The project ID
   * @param {string} Authorization OAuth access token with scope &#x60;projects:modify&#x60;
   * @param {ProjectUpdateProjectsAPI} [body] A project instance with the fields that should be updated.  ReadOnly fields should not be included.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public updateProject(
    id: string,
    Authorization: string,
    body?: ProjectUpdateProjectsAPI,
    Accept?: string,
    options?: any
  ) {
    return ProjectsApiFp(this.configuration).updateProject(
      id,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
